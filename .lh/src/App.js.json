{
    "sourceFile": "src/App.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 27,
            "patches": [
                {
                    "date": 1711393863089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1711393878978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import \"./App.css\";\r\n import backgroundImage from \"./Images/bgdia.png\";\r\n import baseImage from \"./Images/basex5.jpg\";\r\n import birdImage from \"./Images/ramos/ramon1.png\";\r\n-import tubeImage from \"./Images/pipes/pen2.png\";\r\n+import tubeImage from \"./Images/pipes/pipe-green.png\";\r\n import \"./fonts.css\";\r\n \r\n // Constants for game parameters\r\n const gravity = -0.4;\r\n"
                },
                {
                    "date": 1711393891498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\n import \"./App.css\";\r\n import backgroundImage from \"./Images/bgdia.png\";\r\n import baseImage from \"./Images/basex5.jpg\";\r\n-import birdImage from \"./Images/ramos/ramon1.png\";\r\n+import birdImage from \"./Images/\";\r\n import tubeImage from \"./Images/pipes/pipe-green.png\";\r\n import \"./fonts.css\";\r\n \r\n // Constants for game parameters\r\n"
                },
                {
                    "date": 1711393899056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\n import \"./App.css\";\r\n import backgroundImage from \"./Images/bgdia.png\";\r\n import baseImage from \"./Images/basex5.jpg\";\r\n-import birdImage from \"./Images/\";\r\n-import tubeImage from \"./Images/pipes/pipe-green.png\";\r\n+import birdImage from \"./Images/pajaro\";\r\n+import tubeImage from \"./Images/pipe-green.png\";\r\n import \"./fonts.css\";\r\n \r\n // Constants for game parameters\r\n const gravity = -0.4;\r\n"
                },
                {
                    "date": 1711393919275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\n import \"./App.css\";\r\n import backgroundImage from \"./Images/bgdia.png\";\r\n import baseImage from \"./Images/basex5.jpg\";\r\n-import birdImage from \"./Images/pajaro\";\r\n+import birdImage from \"./Images/pajaroaletamedia.png\";\r\n import tubeImage from \"./Images/pipe-green.png\";\r\n import \"./fonts.css\";\r\n \r\n // Constants for game parameters\r\n@@ -179,14 +179,9 @@\n       cancelAnimationFrame(animateRef.current);\r\n     };\r\n   }, [gameStarted, gamePaused, birdVelocity, tubes, gameOver, birdPosition]);\r\n \r\n-  useEffect(() => {\r\n-    if (audioRef.current) {\r\n-      audioRef.current.src = song;\r\n-      audioRef.current.load();\r\n-    }\r\n-  }, []);\r\n+/\r\n \r\n   // Restart the game\r\n   const restartGame = () => {\r\n     setBasePosition(0);\r\n"
                },
                {
                    "date": 1711393924608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,264 @@\n+import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\n+import \"./App.css\";\r\n+import backgroundImage from \"./Images/bgdia.png\";\r\n+import baseImage from \"./Images/basex5.jpg\";\r\n+import birdImage from \"./Images/pajaroaletamedia.png\";\r\n+import tubeImage from \"./Images/pipe-green.png\";\r\n+import \"./fonts.css\";\r\n+\r\n+// Constants for game parameters\r\n+const gravity = -0.4;\r\n+const tubeWidth = 52;\r\n+const tubeHeight = 320;\r\n+const tubeGap = 500;\r\n+const tubeSpeed = 5;\r\n+\r\n+// Function to generate random tube position\r\n+const generateRandomTubePosition = () => {\r\n+  const minY = window.innerHeight * -0.01;\r\n+  const maxY = window.innerHeight * -0.15;\r\n+  const randomY = Math.random() * (maxY - minY) + minY;\r\n+  return { x: window.innerWidth, yUpper: randomY, yLower: randomY - 10 };\r\n+};\r\n+\r\n+// Component for rendering tubes\r\n+const Tube = ({ tube }) => (\r\n+  <div className=\"tube\" style={{ position: \"absolute\", left: tube.x, bottom: 0 }}>\r\n+    <img\r\n+      className=\"tube-upper\"\r\n+      src={tubeImage}\r\n+      alt=\"Tube\"\r\n+      style={{\r\n+        width: tubeWidth,\r\n+        height: tubeHeight,\r\n+        bottom: window.innerHeight - tube.yUpper - tubeHeight,\r\n+      }}\r\n+    />\r\n+    <img\r\n+      className=\"tube-lower\"\r\n+      src={tubeImage}\r\n+      alt=\"Tube\"\r\n+      style={{\r\n+        width: tubeWidth,\r\n+        height: tubeHeight,\r\n+        bottom: tube.yLower,\r\n+        zIndex: 0,\r\n+      }}\r\n+    />\r\n+  </div>\r\n+);\r\n+\r\n+// Main App component\r\n+function App() {\r\n+  // State variables\r\n+  const [basePosition, setBasePosition] = useState(0);\r\n+  const [birdPosition, setBirdPosition] = useState(window.innerHeight / 2);\r\n+  const [birdVelocity, setBirdVelocity] = useState(0);\r\n+  const [gameStarted, setGameStarted] = useState(false);\r\n+  const [gamePaused, setGamePaused] = useState(false);\r\n+  const [gameOver, setGameOver] = useState(false);\r\n+  const [score, setScore] = useState(0);\r\n+  const [highestScore, setHighestScore] = useState(() => {\r\n+    const savedHighestScore = localStorage.getItem(\"highestScore\");\r\n+    return savedHighestScore ? parseInt(savedHighestScore) : 0;\r\n+  });\r\n+  const [tubes, setTubes] = useState([]);\r\n+  \r\n+  // Refs\r\n+  const baseRef = useRef(null);\r\n+  const animateRef = useRef(null);\r\n+  const audioRef = useRef(null);\r\n+\r\n+  // Event handlers\r\n+  const handleKeyDown = useCallback((e) => {\r\n+    if (!gameStarted && e.keyCode === 32) {\r\n+      setGameStarted(true);\r\n+      if (audioRef.current) {\r\n+        audioRef.current.play();\r\n+      }\r\n+    } else if (gameStarted && !gamePaused && e.keyCode === 32) {\r\n+      setBirdVelocity(7);\r\n+    } else if ((e.keyCode === 80 || e.keyCode === 27 || e.keyCode === 32) && gameStarted && !gameOver) {\r\n+      setGamePaused((prevPaused) => !prevPaused);\r\n+    }\r\n+  }, [gameStarted, gamePaused, gameOver]);\r\n+\r\n+  const handleKeyPress = useCallback((e) => {\r\n+    if (e.keyCode === 32 && gameOver) {\r\n+      restartGame();\r\n+    }\r\n+  }, [gameOver]);\r\n+\r\n+  // Effects\r\n+  useEffect(() => {\r\n+    window.addEventListener(\"keydown\", handleKeyDown);\r\n+    return () => {\r\n+      window.removeEventListener(\"keydown\", handleKeyDown);\r\n+    };\r\n+  }, [handleKeyDown]);\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"keydown\", handleKeyPress);\r\n+    return () => {\r\n+      document.removeEventListener(\"keydown\", handleKeyPress);\r\n+    };\r\n+  }, [handleKeyPress]);\r\n+\r\n+  useEffect(() => {\r\n+    if (score > highestScore) {\r\n+      setHighestScore(score);\r\n+      localStorage.setItem(\"highestScore\", score);\r\n+    }\r\n+  }, [score, highestScore]);\r\n+\r\n+  useEffect(() => {\r\n+    const detectBaseCollision = () => {\r\n+      const birdRect = document.querySelector(\".bird\").getBoundingClientRect();\r\n+      const baseRect = baseRef.current.getBoundingClientRect();\r\n+      if (birdRect.bottom >= baseRect.top) {\r\n+        setGameOver(true);\r\n+        cancelAnimationFrame(animateRef.current);\r\n+      }\r\n+    };\r\n+\r\n+    const animate = () => {\r\n+      setBirdVelocity((prevVelocity) => prevVelocity + gravity);\r\n+      setBirdPosition((prevPosition) => prevPosition + birdVelocity);\r\n+      setBasePosition((prevPosition) => (prevPosition + 1) % (window.innerWidth + 100));\r\n+      setTubes((prevTubes) => {\r\n+        let incrementScore = false;\r\n+        const newTubes = prevTubes.map((tube) => {\r\n+          const newX = tube.x - tubeSpeed;\r\n+          if (newX < 100 && tube.x >= 100) {\r\n+            incrementScore = true;\r\n+          }\r\n+          return { ...tube, x: newX };\r\n+        }).filter((tube) => tube.x > -tubeWidth);\r\n+\r\n+        if (incrementScore) {\r\n+          setScore((prevScore) => prevScore + 1);\r\n+        }\r\n+\r\n+        if (newTubes.length === 0 || window.innerWidth - newTubes[newTubes.length - 1].x >= tubeGap) {\r\n+          newTubes.push(generateRandomTubePosition());\r\n+        }\r\n+\r\n+        return newTubes;\r\n+      });\r\n+\r\n+      detectBaseCollision();\r\n+\r\n+      // Check collision with tubes\r\n+      const birdRect = document.querySelector(\".bird\").getBoundingClientRect();\r\n+      tubes.forEach((tube) => {\r\n+        const upperTubeRect = document.querySelector(\".tube-upper\").getBoundingClientRect();\r\n+        const lowerTubeRect = document.querySelector(\".tube-lower\").getBoundingClientRect();\r\n+        if (birdRect.right > tube.x && birdRect.left < tube.x + tubeWidth &&\r\n+          (birdRect.top < upperTubeRect.bottom || birdRect.bottom > lowerTubeRect.top)) {\r\n+          setGameOver(true);\r\n+          cancelAnimationFrame(animateRef.current);\r\n+        }\r\n+      });\r\n+\r\n+      // Check collision with base\r\n+      const baseHeight = 50;\r\n+      const birdBottomPosition = birdPosition + 50 - 1; // Assuming bird height as 50\r\n+      if (birdBottomPosition >= window.innerHeight - baseHeight) {\r\n+        setGameOver(true);\r\n+        cancelAnimationFrame(animateRef.current);\r\n+      }\r\n+\r\n+      animateRef.current = requestAnimationFrame(animate);\r\n+    };\r\n+\r\n+    if (gameStarted && !gamePaused && !gameOver) {\r\n+      animateRef.current = requestAnimationFrame(animate);\r\n+    }\r\n+\r\n+    return () => {\r\n+      cancelAnimationFrame(animateRef.current);\r\n+    };\r\n+  }, [gameStarted, gamePaused, birdVelocity, tubes, gameOver, birdPosition]);\r\n+\r\n+  \r\n+\r\n+  // Restart the game\r\n+  const restartGame = () => {\r\n+    setBasePosition(0);\r\n+    setBirdPosition(window.innerHeight / 2);\r\n+    setBirdVelocity(0);\r\n+    setGameStarted(false);\r\n+    setGamePaused(false);\r\n+    setGameOver(false);\r\n+    setScore(0);\r\n+    setTubes([]);\r\n+  };\r\n+\r\n+  // Render JSX\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {/* Overlay for pause and game over */}\r\n+      <div className={`overlay ${gamePaused || gameOver ? \"overlay-dark\" : \"\"}`} style={{ display: gamePaused ? \"block\" : \"none\" }} />\r\n+      {gamePaused || gameOver ? (\r\n+        <div className=\"overlay\" style={{\r\n+          backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n+          position: \"absolute\",\r\n+          top: 0,\r\n+          left: 0,\r\n+          width: \"100%\",\r\n+          height: \"100%\",\r\n+          zIndex: 9,\r\n+        }} />\r\n+      ) : null}\r\n+      <div className=\"overlay\" style={{ display: gamePaused ? \"block\" : \"none\" }} />\r\n+      {/* Background */}\r\n+      <img src={backgroundImage} alt=\"Background\" className=\"background\" />\r\n+      {/* Tubes */}\r\n+      {tubes.map((tube, index) => (\r\n+        <Tube key={index} tube={tube} />\r\n+      ))}\r\n+      {/* Score display */}\r\n+      <div className=\"score-display\">\r\n+        <h1>SCORE: {score}</h1>\r\n+      </div>\r\n+      {/* Base container */}\r\n+      <div className=\"base-container\">\r\n+        <img src={baseImage} alt=\"Base\" className=\"base\" style={{ left: `${basePosition}px`, bottom: \"0\", zIndex: 1 }} ref={baseRef} />\r\n+        <img src={baseImage} alt=\"Base\" className=\"base\" style={{ left: `${basePosition - window.innerWidth - 100}px`, bottom: \"0\" }} />\r\n+      </div>\r\n+      {/* Pause message */}\r\n+      {gamePaused && (\r\n+        <div className=\"pause-message\">\r\n+          <h1>PAUSED</h1>\r\n+          <h2>PRESS ESC OR SPACE TO CONTINUE</h2>\r\n+        </div>\r\n+      )}\r\n+      {/* Bird */}\r\n+      {gameStarted && !gameOver && (\r\n+        <img src={birdImage} alt=\"Bird\" className=\"bird\" style={{ left: \"100px\", bottom: `${birdPosition}px` }} />\r\n+      )}\r\n+      {/* Game over message */}\r\n+      {gameOver && (\r\n+        <div className=\"pause-message\">\r\n+          <h1>GAME OVER</h1>\r\n+          <h1>HIGHEST SCORE: {highestScore}</h1>\r\n+          <h1>PRESS SPACE TO RESTART</h1>\r\n+        </div>\r\n+      )}\r\n+      {/* Start message */}\r\n+      {!gameStarted && !gameOver && (\r\n+        <div className=\"start-message\">\r\n+          <h1>FLAPPY RAMON</h1>\r\n+          <div className=\"bird-container\">\r\n+            <img src={birdImage} alt=\"Bird\" className=\"start-bird\" />\r\n+          </div>\r\n+          <h1>PRESS SPACE TO START</h1>\r\n+        </div>\r\n+      )}\r\n+      {/* Audio */}\r\n+      <audio ref={audioRef} />\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1711394093718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,274 +179,15 @@\n       cancelAnimationFrame(animateRef.current);\r\n     };\r\n   }, [gameStarted, gamePaused, birdVelocity, tubes, gameOver, birdPosition]);\r\n \r\n-  \r\n-\r\n-  // Restart the game\r\n-  const restartGame = () => {\r\n-    setBasePosition(0);\r\n-    setBirdPosition(window.innerHeight / 2);\r\n-    setBirdVelocity(0);\r\n-    setGameStarted(false);\r\n-    setGamePaused(false);\r\n-    setGameOver(false);\r\n-    setScore(0);\r\n-    setTubes([]);\r\n-  };\r\n-\r\n-  // Render JSX\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {/* Overlay for pause and game over */}\r\n-      <div className={`overlay ${gamePaused || gameOver ? \"overlay-dark\" : \"\"}`} style={{ display: gamePaused ? \"block\" : \"none\" }} />\r\n-      {gamePaused || gameOver ? (\r\n-        <div className=\"overlay\" style={{\r\n-          backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n-          position: \"absolute\",\r\n-          top: 0,\r\n-          left: 0,\r\n-          width: \"100%\",\r\n-          height: \"100%\",\r\n-          zIndex: 9,\r\n-        }} />\r\n-      ) : null}\r\n-      <div className=\"overlay\" style={{ display: gamePaused ? \"block\" : \"none\" }} />\r\n-      {/* Background */}\r\n-      <img src={backgroundImage} alt=\"Background\" className=\"background\" />\r\n-      {/* Tubes */}\r\n-      {tubes.map((tube, index) => (\r\n-        <Tube key={index} tube={tube} />\r\n-      ))}\r\n-      {/* Score display */}\r\n-      <div className=\"score-display\">\r\n-        <h1>SCORE: {score}</h1>\r\n-      </div>\r\n-      {/* Base container */}\r\n-      <div className=\"base-container\">\r\n-        <img src={baseImage} alt=\"Base\" className=\"base\" style={{ left: `${basePosition}px`, bottom: \"0\", zIndex: 1 }} ref={baseRef} />\r\n-        <img src={baseImage} alt=\"Base\" className=\"base\" style={{ left: `${basePosition - window.innerWidth - 100}px`, bottom: \"0\" }} />\r\n-      </div>\r\n-      {/* Pause message */}\r\n-      {gamePaused && (\r\n-        <div className=\"pause-message\">\r\n-          <h1>PAUSED</h1>\r\n-          <h2>PRESS ESC OR SPACE TO CONTINUE</h2>\r\n-        </div>\r\n-      )}\r\n-      {/* Bird */}\r\n-      {gameStarted && !gameOver && (\r\n-        <img src={birdImage} alt=\"Bird\" className=\"bird\" style={{ left: \"100px\", bottom: `${birdPosition}px` }} />\r\n-      )}\r\n-      {/* Game over message */}\r\n-      {gameOver && (\r\n-        <div className=\"pause-message\">\r\n-          <h1>GAME OVER</h1>\r\n-          <h1>HIGHEST SCORE: {highestScore}</h1>\r\n-          <h1>PRESS SPACE TO RESTART</h1>\r\n-        </div>\r\n-      )}\r\n-      {/* Start message */}\r\n-      {!gameStarted && !gameOver && (\r\n-        <div className=\"start-message\">\r\n-          <h1>FLAPPY RAMON</h1>\r\n-          <div className=\"bird-container\">\r\n-            <img src={birdImage} alt=\"Bird\" className=\"start-bird\" />\r\n-          </div>\r\n-          <h1>PRESS SPACE TO START</h1>\r\n-        </div>\r\n-      )}\r\n-      {/* Audio */}\r\n-      <audio ref={audioRef} />\r\n-    </div>\r\n-  );\r\n-}\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\n-import \"./App.css\";\r\n-import backgroundImage from \"./Images/bgdia.png\";\r\n-import baseImage from \"./Images/basex5.jpg\";\r\n-import birdImage from \"./Images/pajaroaletamedia.png\";\r\n-import tubeImage from \"./Images/pipe-green.png\";\r\n-import \"./fonts.css\";\r\n-\r\n-// Constants for game parameters\r\n-const gravity = -0.4;\r\n-const tubeWidth = 52;\r\n-const tubeHeight = 320;\r\n-const tubeGap = 500;\r\n-const tubeSpeed = 5;\r\n-\r\n-// Function to generate random tube position\r\n-const generateRandomTubePosition = () => {\r\n-  const minY = window.innerHeight * -0.01;\r\n-  const maxY = window.innerHeight * -0.15;\r\n-  const randomY = Math.random() * (maxY - minY) + minY;\r\n-  return { x: window.innerWidth, yUpper: randomY, yLower: randomY - 10 };\r\n-};\r\n-\r\n-// Component for rendering tubes\r\n-const Tube = ({ tube }) => (\r\n-  <div className=\"tube\" style={{ position: \"absolute\", left: tube.x, bottom: 0 }}>\r\n-    <img\r\n-      className=\"tube-upper\"\r\n-      src={tubeImage}\r\n-      alt=\"Tube\"\r\n-      style={{\r\n-        width: tubeWidth,\r\n-        height: tubeHeight,\r\n-        bottom: window.innerHeight - tube.yUpper - tubeHeight,\r\n-      }}\r\n-    />\r\n-    <img\r\n-      className=\"tube-lower\"\r\n-      src={tubeImage}\r\n-      alt=\"Tube\"\r\n-      style={{\r\n-        width: tubeWidth,\r\n-        height: tubeHeight,\r\n-        bottom: tube.yLower,\r\n-        zIndex: 0,\r\n-      }}\r\n-    />\r\n-  </div>\r\n-);\r\n-\r\n-// Main App component\r\n-function App() {\r\n-  // State variables\r\n-  const [basePosition, setBasePosition] = useState(0);\r\n-  const [birdPosition, setBirdPosition] = useState(window.innerHeight / 2);\r\n-  const [birdVelocity, setBirdVelocity] = useState(0);\r\n-  const [gameStarted, setGameStarted] = useState(false);\r\n-  const [gamePaused, setGamePaused] = useState(false);\r\n-  const [gameOver, setGameOver] = useState(false);\r\n-  const [score, setScore] = useState(0);\r\n-  const [highestScore, setHighestScore] = useState(() => {\r\n-    const savedHighestScore = localStorage.getItem(\"highestScore\");\r\n-    return savedHighestScore ? parseInt(savedHighestScore) : 0;\r\n-  });\r\n-  const [tubes, setTubes] = useState([]);\r\n-  \r\n-  // Refs\r\n-  const baseRef = useRef(null);\r\n-  const animateRef = useRef(null);\r\n-  const audioRef = useRef(null);\r\n-\r\n-  // Event handlers\r\n-  const handleKeyDown = useCallback((e) => {\r\n-    if (!gameStarted && e.keyCode === 32) {\r\n-      setGameStarted(true);\r\n-      if (audioRef.current) {\r\n-        audioRef.current.play();\r\n-      }\r\n-    } else if (gameStarted && !gamePaused && e.keyCode === 32) {\r\n-      setBirdVelocity(7);\r\n-    } else if ((e.keyCode === 80 || e.keyCode === 27 || e.keyCode === 32) && gameStarted && !gameOver) {\r\n-      setGamePaused((prevPaused) => !prevPaused);\r\n-    }\r\n-  }, [gameStarted, gamePaused, gameOver]);\r\n-\r\n-  const handleKeyPress = useCallback((e) => {\r\n-    if (e.keyCode === 32 && gameOver) {\r\n-      restartGame();\r\n-    }\r\n-  }, [gameOver]);\r\n-\r\n-  // Effects\r\n   useEffect(() => {\r\n-    window.addEventListener(\"keydown\", handleKeyDown);\r\n-    return () => {\r\n-      window.removeEventListener(\"keydown\", handleKeyDown);\r\n-    };\r\n-  }, [handleKeyDown]);\r\n-\r\n-  useEffect(() => {\r\n-    document.addEventListener(\"keydown\", handleKeyPress);\r\n-    return () => {\r\n-      document.removeEventListener(\"keydown\", handleKeyPress);\r\n-    };\r\n-  }, [handleKeyPress]);\r\n-\r\n-  useEffect(() => {\r\n-    if (score > highestScore) {\r\n-      setHighestScore(score);\r\n-      localStorage.setItem(\"highestScore\", score);\r\n+    if (audioRef.current) {\r\n+      audioRef.current.src = song;\r\n+      audioRef.current.load();\r\n     }\r\n-  }, [score, highestScore]);\r\n+  }, []);\r\n \r\n-  useEffect(() => {\r\n-    const detectBaseCollision = () => {\r\n-      const birdRect = document.querySelector(\".bird\").getBoundingClientRect();\r\n-      const baseRect = baseRef.current.getBoundingClientRect();\r\n-      if (birdRect.bottom >= baseRect.top) {\r\n-        setGameOver(true);\r\n-        cancelAnimationFrame(animateRef.current);\r\n-      }\r\n-    };\r\n-\r\n-    const animate = () => {\r\n-      setBirdVelocity((prevVelocity) => prevVelocity + gravity);\r\n-      setBirdPosition((prevPosition) => prevPosition + birdVelocity);\r\n-      setBasePosition((prevPosition) => (prevPosition + 1) % (window.innerWidth + 100));\r\n-      setTubes((prevTubes) => {\r\n-        let incrementScore = false;\r\n-        const newTubes = prevTubes.map((tube) => {\r\n-          const newX = tube.x - tubeSpeed;\r\n-          if (newX < 100 && tube.x >= 100) {\r\n-            incrementScore = true;\r\n-          }\r\n-          return { ...tube, x: newX };\r\n-        }).filter((tube) => tube.x > -tubeWidth);\r\n-\r\n-        if (incrementScore) {\r\n-          setScore((prevScore) => prevScore + 1);\r\n-        }\r\n-\r\n-        if (newTubes.length === 0 || window.innerWidth - newTubes[newTubes.length - 1].x >= tubeGap) {\r\n-          newTubes.push(generateRandomTubePosition());\r\n-        }\r\n-\r\n-        return newTubes;\r\n-      });\r\n-\r\n-      detectBaseCollision();\r\n-\r\n-      // Check collision with tubes\r\n-      const birdRect = document.querySelector(\".bird\").getBoundingClientRect();\r\n-      tubes.forEach((tube) => {\r\n-        const upperTubeRect = document.querySelector(\".tube-upper\").getBoundingClientRect();\r\n-        const lowerTubeRect = document.querySelector(\".tube-lower\").getBoundingClientRect();\r\n-        if (birdRect.right > tube.x && birdRect.left < tube.x + tubeWidth &&\r\n-          (birdRect.top < upperTubeRect.bottom || birdRect.bottom > lowerTubeRect.top)) {\r\n-          setGameOver(true);\r\n-          cancelAnimationFrame(animateRef.current);\r\n-        }\r\n-      });\r\n-\r\n-      // Check collision with base\r\n-      const baseHeight = 50;\r\n-      const birdBottomPosition = birdPosition + 50 - 1; // Assuming bird height as 50\r\n-      if (birdBottomPosition >= window.innerHeight - baseHeight) {\r\n-        setGameOver(true);\r\n-        cancelAnimationFrame(animateRef.current);\r\n-      }\r\n-\r\n-      animateRef.current = requestAnimationFrame(animate);\r\n-    };\r\n-\r\n-    if (gameStarted && !gamePaused && !gameOver) {\r\n-      animateRef.current = requestAnimationFrame(animate);\r\n-    }\r\n-\r\n-    return () => {\r\n-      cancelAnimationFrame(animateRef.current);\r\n-    };\r\n-  }, [gameStarted, gamePaused, birdVelocity, tubes, gameOver, birdPosition]);\r\n-\r\n-/\r\n-\r\n   // Restart the game\r\n   const restartGame = () => {\r\n     setBasePosition(0);\r\n     setBirdPosition(window.innerHeight / 2);\r\n"
                },
                {
                    "date": 1711394106379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,10 +181,9 @@\n   }, [gameStarted, gamePaused, birdVelocity, tubes, gameOver, birdPosition]);\r\n \r\n   useEffect(() => {\r\n     if (audioRef.current) {\r\n-      audioRef.current.src = song;\r\n-      audioRef.current.load();\r\n+      \r\n     }\r\n   }, []);\r\n \r\n   // Restart the game\r\n"
                },
                {
                    "date": 1711394113404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,14 +179,8 @@\n       cancelAnimationFrame(animateRef.current);\r\n     };\r\n   }, [gameStarted, gamePaused, birdVelocity, tubes, gameOver, birdPosition]);\r\n \r\n-  useEffect(() => {\r\n-    if (audioRef.current) {\r\n-      \r\n-    }\r\n-  }, []);\r\n-\r\n   // Restart the game\r\n   const restartGame = () => {\r\n     setBasePosition(0);\r\n     setBirdPosition(window.innerHeight / 2);\r\n"
                },
                {
                    "date": 1711394156707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,8 +130,10 @@\n         const newTubes = prevTubes.map((tube) => {\r\n           const newX = tube.x - tubeSpeed;\r\n           if (newX < 100 && tube.x >= 100) {\r\n             incrementScore = true;\r\n+            audioRef.current.src = song;\r\n+      audioRef.current.load();\r\n           }\r\n           return { ...tube, x: newX };\r\n         }).filter((tube) => tube.x > -tubeWidth);\r\n \r\n"
                },
                {
                    "date": 1711394166332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import \"./App.css\";\r\n import backgroundImage from \"./Images/bgdia.png\";\r\n import baseImage from \"./Images/basex5.jpg\";\r\n import birdImage from \"./Images/pajaroaletamedia.png\";\r\n-import tubeImage from \"./Images/pipe-green.png\";\r\n+import tubeImage from \"./Images/pipe-green.png\";\\import\r\n import \"./fonts.css\";\r\n \r\n // Constants for game parameters\r\n const gravity = -0.4;\r\n"
                },
                {
                    "date": 1711394176985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,10 @@\n import \"./App.css\";\r\n import backgroundImage from \"./Images/bgdia.png\";\r\n import baseImage from \"./Images/basex5.jpg\";\r\n import birdImage from \"./Images/pajaroaletamedia.png\";\r\n-import tubeImage from \"./Images/pipe-green.png\";\\import\r\n+import tubeImage from \"./Images/pipe-green.png\";\r\n+import ding from \"\"\r\n import \"./fonts.css\";\r\n \r\n // Constants for game parameters\r\n const gravity = -0.4;\r\n"
                },
                {
                    "date": 1711394185373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import backgroundImage from \"./Images/bgdia.png\";\r\n import baseImage from \"./Images/basex5.jpg\";\r\n import birdImage from \"./Images/pajaroaletamedia.png\";\r\n import tubeImage from \"./Images/pipe-green.png\";\r\n-import ding from \"\"\r\n+import ding from \"./audio\"\r\n import \"./fonts.css\";\r\n \r\n // Constants for game parameters\r\n const gravity = -0.4;\r\n"
                },
                {
                    "date": 1711394200358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import backgroundImage from \"./Images/bgdia.png\";\r\n import baseImage from \"./Images/basex5.jpg\";\r\n import birdImage from \"./Images/pajaroaletamedia.png\";\r\n import tubeImage from \"./Images/pipe-green.png\";\r\n-import ding from \"./audio\"\r\n+import ding from \"./audio/point.\"\r\n import \"./fonts.css\";\r\n \r\n // Constants for game parameters\r\n const gravity = -0.4;\r\n"
                },
                {
                    "date": 1711394215602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n         const newTubes = prevTubes.map((tube) => {\r\n           const newX = tube.x - tubeSpeed;\r\n           if (newX < 100 && tube.x >= 100) {\r\n             incrementScore = true;\r\n-            audioRef.current.src = song;\r\n+            audioRef.current.src = ding;\r\n       audioRef.current.load();\r\n           }\r\n           return { ...tube, x: newX };\r\n         }).filter((tube) => tube.x > -tubeWidth);\r\n"
                },
                {
                    "date": 1711394229715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import backgroundImage from \"./Images/bgdia.png\";\r\n import baseImage from \"./Images/basex5.jpg\";\r\n import birdImage from \"./Images/pajaroaletamedia.png\";\r\n import tubeImage from \"./Images/pipe-green.png\";\r\n-import ding from \"./audio/point.\"\r\n+import ding from \"./audio/point.wav\";\r\n import \"./fonts.css\";\r\n \r\n // Constants for game parameters\r\n const gravity = -0.4;\r\n@@ -23,9 +23,12 @@\n };\r\n \r\n // Component for rendering tubes\r\n const Tube = ({ tube }) => (\r\n-  <div className=\"tube\" style={{ position: \"absolute\", left: tube.x, bottom: 0 }}>\r\n+  <div\r\n+    className=\"tube\"\r\n+    style={{ position: \"absolute\", left: tube.x, bottom: 0 }}\r\n+  >\r\n     <img\r\n       className=\"tube-upper\"\r\n       src={tubeImage}\r\n       alt=\"Tube\"\r\n@@ -63,33 +66,43 @@\n     const savedHighestScore = localStorage.getItem(\"highestScore\");\r\n     return savedHighestScore ? parseInt(savedHighestScore) : 0;\r\n   });\r\n   const [tubes, setTubes] = useState([]);\r\n-  \r\n+\r\n   // Refs\r\n   const baseRef = useRef(null);\r\n   const animateRef = useRef(null);\r\n   const audioRef = useRef(null);\r\n \r\n   // Event handlers\r\n-  const handleKeyDown = useCallback((e) => {\r\n-    if (!gameStarted && e.keyCode === 32) {\r\n-      setGameStarted(true);\r\n-      if (audioRef.current) {\r\n-        audioRef.current.play();\r\n+  const handleKeyDown = useCallback(\r\n+    (e) => {\r\n+      if (!gameStarted && e.keyCode === 32) {\r\n+        setGameStarted(true);\r\n+        if (audioRef.current) {\r\n+          audioRef.current.play();\r\n+        }\r\n+      } else if (gameStarted && !gamePaused && e.keyCode === 32) {\r\n+        setBirdVelocity(7);\r\n+      } else if (\r\n+        (e.keyCode === 80 || e.keyCode === 27 || e.keyCode === 32) &&\r\n+        gameStarted &&\r\n+        !gameOver\r\n+      ) {\r\n+        setGamePaused((prevPaused) => !prevPaused);\r\n       }\r\n-    } else if (gameStarted && !gamePaused && e.keyCode === 32) {\r\n-      setBirdVelocity(7);\r\n-    } else if ((e.keyCode === 80 || e.keyCode === 27 || e.keyCode === 32) && gameStarted && !gameOver) {\r\n-      setGamePaused((prevPaused) => !prevPaused);\r\n-    }\r\n-  }, [gameStarted, gamePaused, gameOver]);\r\n+    },\r\n+    [gameStarted, gamePaused, gameOver]\r\n+  );\r\n \r\n-  const handleKeyPress = useCallback((e) => {\r\n-    if (e.keyCode === 32 && gameOver) {\r\n-      restartGame();\r\n-    }\r\n-  }, [gameOver]);\r\n+  const handleKeyPress = useCallback(\r\n+    (e) => {\r\n+      if (e.keyCode === 32 && gameOver) {\r\n+        restartGame();\r\n+      }\r\n+    },\r\n+    [gameOver]\r\n+  );\r\n \r\n   // Effects\r\n   useEffect(() => {\r\n     window.addEventListener(\"keydown\", handleKeyDown);\r\n@@ -124,26 +137,33 @@\n \r\n     const animate = () => {\r\n       setBirdVelocity((prevVelocity) => prevVelocity + gravity);\r\n       setBirdPosition((prevPosition) => prevPosition + birdVelocity);\r\n-      setBasePosition((prevPosition) => (prevPosition + 1) % (window.innerWidth + 100));\r\n+      setBasePosition(\r\n+        (prevPosition) => (prevPosition + 1) % (window.innerWidth + 100)\r\n+      );\r\n       setTubes((prevTubes) => {\r\n         let incrementScore = false;\r\n-        const newTubes = prevTubes.map((tube) => {\r\n-          const newX = tube.x - tubeSpeed;\r\n-          if (newX < 100 && tube.x >= 100) {\r\n-            incrementScore = true;\r\n-            audioRef.current.src = ding;\r\n-      audioRef.current.load();\r\n-          }\r\n-          return { ...tube, x: newX };\r\n-        }).filter((tube) => tube.x > -tubeWidth);\r\n+        const newTubes = prevTubes\r\n+          .map((tube) => {\r\n+            const newX = tube.x - tubeSpeed;\r\n+            if (newX < 100 && tube.x >= 100) {\r\n+              incrementScore = true;\r\n+              audioRef.current.src = ding;\r\n+              audioRef.current.load();\r\n+            }\r\n+            return { ...tube, x: newX };\r\n+          })\r\n+          .filter((tube) => tube.x > -tubeWidth);\r\n \r\n         if (incrementScore) {\r\n           setScore((prevScore) => prevScore + 1);\r\n         }\r\n \r\n-        if (newTubes.length === 0 || window.innerWidth - newTubes[newTubes.length - 1].x >= tubeGap) {\r\n+        if (\r\n+          newTubes.length === 0 ||\r\n+          window.innerWidth - newTubes[newTubes.length - 1].x >= tubeGap\r\n+        ) {\r\n           newTubes.push(generateRandomTubePosition());\r\n         }\r\n \r\n         return newTubes;\r\n@@ -153,12 +173,20 @@\n \r\n       // Check collision with tubes\r\n       const birdRect = document.querySelector(\".bird\").getBoundingClientRect();\r\n       tubes.forEach((tube) => {\r\n-        const upperTubeRect = document.querySelector(\".tube-upper\").getBoundingClientRect();\r\n-        const lowerTubeRect = document.querySelector(\".tube-lower\").getBoundingClientRect();\r\n-        if (birdRect.right > tube.x && birdRect.left < tube.x + tubeWidth &&\r\n-          (birdRect.top < upperTubeRect.bottom || birdRect.bottom > lowerTubeRect.top)) {\r\n+        const upperTubeRect = document\r\n+          .querySelector(\".tube-upper\")\r\n+          .getBoundingClientRect();\r\n+        const lowerTubeRect = document\r\n+          .querySelector(\".tube-lower\")\r\n+          .getBoundingClientRect();\r\n+        if (\r\n+          birdRect.right > tube.x &&\r\n+          birdRect.left < tube.x + tubeWidth &&\r\n+          (birdRect.top < upperTubeRect.bottom ||\r\n+            birdRect.bottom > lowerTubeRect.top)\r\n+        ) {\r\n           setGameOver(true);\r\n           cancelAnimationFrame(animateRef.current);\r\n         }\r\n       });\r\n@@ -198,21 +226,30 @@\n   // Render JSX\r\n   return (\r\n     <div className=\"App\">\r\n       {/* Overlay for pause and game over */}\r\n-      <div className={`overlay ${gamePaused || gameOver ? \"overlay-dark\" : \"\"}`} style={{ display: gamePaused ? \"block\" : \"none\" }} />\r\n+      <div\r\n+        className={`overlay ${gamePaused || gameOver ? \"overlay-dark\" : \"\"}`}\r\n+        style={{ display: gamePaused ? \"block\" : \"none\" }}\r\n+      />\r\n       {gamePaused || gameOver ? (\r\n-        <div className=\"overlay\" style={{\r\n-          backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n-          position: \"absolute\",\r\n-          top: 0,\r\n-          left: 0,\r\n-          width: \"100%\",\r\n-          height: \"100%\",\r\n-          zIndex: 9,\r\n-        }} />\r\n+        <div\r\n+          className=\"overlay\"\r\n+          style={{\r\n+            backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n+            position: \"absolute\",\r\n+            top: 0,\r\n+            left: 0,\r\n+            width: \"100%\",\r\n+            height: \"100%\",\r\n+            zIndex: 9,\r\n+          }}\r\n+        />\r\n       ) : null}\r\n-      <div className=\"overlay\" style={{ display: gamePaused ? \"block\" : \"none\" }} />\r\n+      <div\r\n+        className=\"overlay\"\r\n+        style={{ display: gamePaused ? \"block\" : \"none\" }}\r\n+      />\r\n       {/* Background */}\r\n       <img src={backgroundImage} alt=\"Background\" className=\"background\" />\r\n       {/* Tubes */}\r\n       {tubes.map((tube, index) => (\r\n@@ -223,10 +260,24 @@\n         <h1>SCORE: {score}</h1>\r\n       </div>\r\n       {/* Base container */}\r\n       <div className=\"base-container\">\r\n-        <img src={baseImage} alt=\"Base\" className=\"base\" style={{ left: `${basePosition}px`, bottom: \"0\", zIndex: 1 }} ref={baseRef} />\r\n-        <img src={baseImage} alt=\"Base\" className=\"base\" style={{ left: `${basePosition - window.innerWidth - 100}px`, bottom: \"0\" }} />\r\n+        <img\r\n+          src={baseImage}\r\n+          alt=\"Base\"\r\n+          className=\"base\"\r\n+          style={{ left: `${basePosition}px`, bottom: \"0\", zIndex: 1 }}\r\n+          ref={baseRef}\r\n+        />\r\n+        <img\r\n+          src={baseImage}\r\n+          alt=\"Base\"\r\n+          className=\"base\"\r\n+          style={{\r\n+            left: `${basePosition - window.innerWidth - 100}px`,\r\n+            bottom: \"0\",\r\n+          }}\r\n+        />\r\n       </div>\r\n       {/* Pause message */}\r\n       {gamePaused && (\r\n         <div className=\"pause-message\">\r\n@@ -235,9 +286,14 @@\n         </div>\r\n       )}\r\n       {/* Bird */}\r\n       {gameStarted && !gameOver && (\r\n-        <img src={birdImage} alt=\"Bird\" className=\"bird\" style={{ left: \"100px\", bottom: `${birdPosition}px` }} />\r\n+        <img\r\n+          src={birdImage}\r\n+          alt=\"Bird\"\r\n+          className=\"bird\"\r\n+          style={{ left: \"100px\", bottom: `${birdPosition}px` }}\r\n+        />\r\n       )}\r\n       {/* Game over message */}\r\n       {gameOver && (\r\n         <div className=\"pause-message\">\r\n"
                },
                {
                    "date": 1711394408428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,8 +124,10 @@\n       localStorage.setItem(\"highestScore\", score);\r\n     }\r\n   }, [score, highestScore]);\r\n \r\n+  \r\n+\r\n   useEffect(() => {\r\n     const detectBaseCollision = () => {\r\n       const birdRect = document.querySelector(\".bird\").getBoundingClientRect();\r\n       const baseRect = baseRef.current.getBoundingClientRect();\r\n"
                },
                {
                    "date": 1711394415497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,14 @@\n       localStorage.setItem(\"highestScore\", score);\r\n     }\r\n   }, [score, highestScore]);\r\n \r\n-  \r\n+  useEffect(() => {\r\n+    if (audioRef.current) {\r\n+      audioRef.current.src = ding;\r\n+      audioRef.current.load();\r\n+    }\r\n+  }, []);\r\n \r\n   useEffect(() => {\r\n     const detectBaseCollision = () => {\r\n       const birdRect = document.querySelector(\".bird\").getBoundingClientRect();\r\n"
                },
                {
                    "date": 1711394422459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,328 @@\n+import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\n+import \"./App.css\";\r\n+import backgroundImage from \"./Images/bgdia.png\";\r\n+import baseImage from \"./Images/basex5.jpg\";\r\n+import birdImage from \"./Images/pajaroaletamedia.png\";\r\n+import tubeImage from \"./Images/pipe-green.png\";\r\n+import ding from \"./audio/point.wav\";\r\n+import \"./fonts.css\";\r\n+\r\n+// Constants for game parameters\r\n+const gravity = -0.4;\r\n+const tubeWidth = 52;\r\n+const tubeHeight = 320;\r\n+const tubeGap = 500;\r\n+const tubeSpeed = 5;\r\n+\r\n+// Function to generate random tube position\r\n+const generateRandomTubePosition = () => {\r\n+  const minY = window.innerHeight * -0.01;\r\n+  const maxY = window.innerHeight * -0.15;\r\n+  const randomY = Math.random() * (maxY - minY) + minY;\r\n+  return { x: window.innerWidth, yUpper: randomY, yLower: randomY - 10 };\r\n+};\r\n+\r\n+// Component for rendering tubes\r\n+const Tube = ({ tube }) => (\r\n+  <div\r\n+    className=\"tube\"\r\n+    style={{ position: \"absolute\", left: tube.x, bottom: 0 }}\r\n+  >\r\n+    <img\r\n+      className=\"tube-upper\"\r\n+      src={tubeImage}\r\n+      alt=\"Tube\"\r\n+      style={{\r\n+        width: tubeWidth,\r\n+        height: tubeHeight,\r\n+        bottom: window.innerHeight - tube.yUpper - tubeHeight,\r\n+      }}\r\n+    />\r\n+    <img\r\n+      className=\"tube-lower\"\r\n+      src={tubeImage}\r\n+      alt=\"Tube\"\r\n+      style={{\r\n+        width: tubeWidth,\r\n+        height: tubeHeight,\r\n+        bottom: tube.yLower,\r\n+        zIndex: 0,\r\n+      }}\r\n+    />\r\n+  </div>\r\n+);\r\n+\r\n+// Main App component\r\n+function App() {\r\n+  // State variables\r\n+  const [basePosition, setBasePosition] = useState(0);\r\n+  const [birdPosition, setBirdPosition] = useState(window.innerHeight / 2);\r\n+  const [birdVelocity, setBirdVelocity] = useState(0);\r\n+  const [gameStarted, setGameStarted] = useState(false);\r\n+  const [gamePaused, setGamePaused] = useState(false);\r\n+  const [gameOver, setGameOver] = useState(false);\r\n+  const [score, setScore] = useState(0);\r\n+  const [highestScore, setHighestScore] = useState(() => {\r\n+    const savedHighestScore = localStorage.getItem(\"highestScore\");\r\n+    return savedHighestScore ? parseInt(savedHighestScore) : 0;\r\n+  });\r\n+  const [tubes, setTubes] = useState([]);\r\n+\r\n+  // Refs\r\n+  const baseRef = useRef(null);\r\n+  const animateRef = useRef(null);\r\n+  const audioRef = useRef(null);\r\n+\r\n+  // Event handlers\r\n+  const handleKeyDown = useCallback(\r\n+    (e) => {\r\n+      if (!gameStarted && e.keyCode === 32) {\r\n+        setGameStarted(true);\r\n+        if (audioRef.current) {\r\n+          audioRef.current.play();\r\n+        }\r\n+      } else if (gameStarted && !gamePaused && e.keyCode === 32) {\r\n+        setBirdVelocity(7);\r\n+      } else if (\r\n+        (e.keyCode === 80 || e.keyCode === 27 || e.keyCode === 32) &&\r\n+        gameStarted &&\r\n+        !gameOver\r\n+      ) {\r\n+        setGamePaused((prevPaused) => !prevPaused);\r\n+      }\r\n+    },\r\n+    [gameStarted, gamePaused, gameOver]\r\n+  );\r\n+\r\n+  const handleKeyPress = useCallback(\r\n+    (e) => {\r\n+      if (e.keyCode === 32 && gameOver) {\r\n+        restartGame();\r\n+      }\r\n+    },\r\n+    [gameOver]\r\n+  );\r\n+\r\n+  // Effects\r\n+  useEffect(() => {\r\n+    window.addEventListener(\"keydown\", handleKeyDown);\r\n+    return () => {\r\n+      window.removeEventListener(\"keydown\", handleKeyDown);\r\n+    };\r\n+  }, [handleKeyDown]);\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"keydown\", handleKeyPress);\r\n+    return () => {\r\n+      document.removeEventListener(\"keydown\", handleKeyPress);\r\n+    };\r\n+  }, [handleKeyPress]);\r\n+\r\n+  useEffect(() => {\r\n+    if (score > highestScore) {\r\n+      setHighestScore(score);\r\n+      localStorage.setItem(\"highestScore\", score);\r\n+    }\r\n+  }, [score, highestScore]);\r\n+\r\n+  useEffect(() => {\r\n+    if () {\r\n+      audioRef.current.src = ding;\r\n+      audioRef.current.load();\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    const detectBaseCollision = () => {\r\n+      const birdRect = document.querySelector(\".bird\").getBoundingClientRect();\r\n+      const baseRect = baseRef.current.getBoundingClientRect();\r\n+      if (birdRect.bottom >= baseRect.top) {\r\n+        setGameOver(true);\r\n+        cancelAnimationFrame(animateRef.current);\r\n+      }\r\n+    };\r\n+\r\n+    const animate = () => {\r\n+      setBirdVelocity((prevVelocity) => prevVelocity + gravity);\r\n+      setBirdPosition((prevPosition) => prevPosition + birdVelocity);\r\n+      setBasePosition(\r\n+        (prevPosition) => (prevPosition + 1) % (window.innerWidth + 100)\r\n+      );\r\n+      setTubes((prevTubes) => {\r\n+        let incrementScore = false;\r\n+        const newTubes = prevTubes\r\n+          .map((tube) => {\r\n+            const newX = tube.x - tubeSpeed;\r\n+            if (newX < 100 && tube.x >= 100) {\r\n+              incrementScore = true;\r\n+              audioRef.current.src = ding;\r\n+              audioRef.current.load();\r\n+            }\r\n+            return { ...tube, x: newX };\r\n+          })\r\n+          .filter((tube) => tube.x > -tubeWidth);\r\n+\r\n+        if (incrementScore) {\r\n+          setScore((prevScore) => prevScore + 1);\r\n+        }\r\n+\r\n+        if (\r\n+          newTubes.length === 0 ||\r\n+          window.innerWidth - newTubes[newTubes.length - 1].x >= tubeGap\r\n+        ) {\r\n+          newTubes.push(generateRandomTubePosition());\r\n+        }\r\n+\r\n+        return newTubes;\r\n+      });\r\n+\r\n+      detectBaseCollision();\r\n+\r\n+      // Check collision with tubes\r\n+      const birdRect = document.querySelector(\".bird\").getBoundingClientRect();\r\n+      tubes.forEach((tube) => {\r\n+        const upperTubeRect = document\r\n+          .querySelector(\".tube-upper\")\r\n+          .getBoundingClientRect();\r\n+        const lowerTubeRect = document\r\n+          .querySelector(\".tube-lower\")\r\n+          .getBoundingClientRect();\r\n+        if (\r\n+          birdRect.right > tube.x &&\r\n+          birdRect.left < tube.x + tubeWidth &&\r\n+          (birdRect.top < upperTubeRect.bottom ||\r\n+            birdRect.bottom > lowerTubeRect.top)\r\n+        ) {\r\n+          setGameOver(true);\r\n+          cancelAnimationFrame(animateRef.current);\r\n+        }\r\n+      });\r\n+\r\n+      // Check collision with base\r\n+      const baseHeight = 50;\r\n+      const birdBottomPosition = birdPosition + 50 - 1; // Assuming bird height as 50\r\n+      if (birdBottomPosition >= window.innerHeight - baseHeight) {\r\n+        setGameOver(true);\r\n+        cancelAnimationFrame(animateRef.current);\r\n+      }\r\n+\r\n+      animateRef.current = requestAnimationFrame(animate);\r\n+    };\r\n+\r\n+    if (gameStarted && !gamePaused && !gameOver) {\r\n+      animateRef.current = requestAnimationFrame(animate);\r\n+    }\r\n+\r\n+    return () => {\r\n+      cancelAnimationFrame(animateRef.current);\r\n+    };\r\n+  }, [gameStarted, gamePaused, birdVelocity, tubes, gameOver, birdPosition]);\r\n+\r\n+  // Restart the game\r\n+  const restartGame = () => {\r\n+    setBasePosition(0);\r\n+    setBirdPosition(window.innerHeight / 2);\r\n+    setBirdVelocity(0);\r\n+    setGameStarted(false);\r\n+    setGamePaused(false);\r\n+    setGameOver(false);\r\n+    setScore(0);\r\n+    setTubes([]);\r\n+  };\r\n+\r\n+  // Render JSX\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {/* Overlay for pause and game over */}\r\n+      <div\r\n+        className={`overlay ${gamePaused || gameOver ? \"overlay-dark\" : \"\"}`}\r\n+        style={{ display: gamePaused ? \"block\" : \"none\" }}\r\n+      />\r\n+      {gamePaused || gameOver ? (\r\n+        <div\r\n+          className=\"overlay\"\r\n+          style={{\r\n+            backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n+            position: \"absolute\",\r\n+            top: 0,\r\n+            left: 0,\r\n+            width: \"100%\",\r\n+            height: \"100%\",\r\n+            zIndex: 9,\r\n+          }}\r\n+        />\r\n+      ) : null}\r\n+      <div\r\n+        className=\"overlay\"\r\n+        style={{ display: gamePaused ? \"block\" : \"none\" }}\r\n+      />\r\n+      {/* Background */}\r\n+      <img src={backgroundImage} alt=\"Background\" className=\"background\" />\r\n+      {/* Tubes */}\r\n+      {tubes.map((tube, index) => (\r\n+        <Tube key={index} tube={tube} />\r\n+      ))}\r\n+      {/* Score display */}\r\n+      <div className=\"score-display\">\r\n+        <h1>SCORE: {score}</h1>\r\n+      </div>\r\n+      {/* Base container */}\r\n+      <div className=\"base-container\">\r\n+        <img\r\n+          src={baseImage}\r\n+          alt=\"Base\"\r\n+          className=\"base\"\r\n+          style={{ left: `${basePosition}px`, bottom: \"0\", zIndex: 1 }}\r\n+          ref={baseRef}\r\n+        />\r\n+        <img\r\n+          src={baseImage}\r\n+          alt=\"Base\"\r\n+          className=\"base\"\r\n+          style={{\r\n+            left: `${basePosition - window.innerWidth - 100}px`,\r\n+            bottom: \"0\",\r\n+          }}\r\n+        />\r\n+      </div>\r\n+      {/* Pause message */}\r\n+      {gamePaused && (\r\n+        <div className=\"pause-message\">\r\n+          <h1>PAUSED</h1>\r\n+          <h2>PRESS ESC OR SPACE TO CONTINUE</h2>\r\n+        </div>\r\n+      )}\r\n+      {/* Bird */}\r\n+      {gameStarted && !gameOver && (\r\n+        <img\r\n+          src={birdImage}\r\n+          alt=\"Bird\"\r\n+          className=\"bird\"\r\n+          style={{ left: \"100px\", bottom: `${birdPosition}px` }}\r\n+        />\r\n+      )}\r\n+      {/* Game over message */}\r\n+      {gameOver && (\r\n+        <div className=\"pause-message\">\r\n+          <h1>GAME OVER</h1>\r\n+          <h1>HIGHEST SCORE: {highestScore}</h1>\r\n+          <h1>PRESS SPACE TO RESTART</h1>\r\n+        </div>\r\n+      )}\r\n+      {/* Start message */}\r\n+      {!gameStarted && !gameOver && (\r\n+        <div className=\"start-message\">\r\n+          <h1>FLAPPY RAMON</h1>\r\n+          <div className=\"bird-container\">\r\n+            <img src={birdImage} alt=\"Bird\" className=\"start-bird\" />\r\n+          </div>\r\n+          <h1>PRESS SPACE TO START</h1>\r\n+        </div>\r\n+      )}\r\n+      {/* Audio */}\r\n+      <audio ref={audioRef} />\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1711394430201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,10 +154,9 @@\n           .map((tube) => {\r\n             const newX = tube.x - tubeSpeed;\r\n             if (newX < 100 && tube.x >= 100) {\r\n               incrementScore = true;\r\n-              audioRef.current.src = ding;\r\n-              audioRef.current.load();\r\n+              \r\n             }\r\n             return { ...tube, x: newX };\r\n           })\r\n           .filter((tube) => tube.x > -tubeWidth);\r\n@@ -325,332 +324,4 @@\n   );\r\n }\r\n \r\n export default App;\r\n-import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\n-import \"./App.css\";\r\n-import backgroundImage from \"./Images/bgdia.png\";\r\n-import baseImage from \"./Images/basex5.jpg\";\r\n-import birdImage from \"./Images/pajaroaletamedia.png\";\r\n-import tubeImage from \"./Images/pipe-green.png\";\r\n-import ding from \"./audio/point.wav\";\r\n-import \"./fonts.css\";\r\n-\r\n-// Constants for game parameters\r\n-const gravity = -0.4;\r\n-const tubeWidth = 52;\r\n-const tubeHeight = 320;\r\n-const tubeGap = 500;\r\n-const tubeSpeed = 5;\r\n-\r\n-// Function to generate random tube position\r\n-const generateRandomTubePosition = () => {\r\n-  const minY = window.innerHeight * -0.01;\r\n-  const maxY = window.innerHeight * -0.15;\r\n-  const randomY = Math.random() * (maxY - minY) + minY;\r\n-  return { x: window.innerWidth, yUpper: randomY, yLower: randomY - 10 };\r\n-};\r\n-\r\n-// Component for rendering tubes\r\n-const Tube = ({ tube }) => (\r\n-  <div\r\n-    className=\"tube\"\r\n-    style={{ position: \"absolute\", left: tube.x, bottom: 0 }}\r\n-  >\r\n-    <img\r\n-      className=\"tube-upper\"\r\n-      src={tubeImage}\r\n-      alt=\"Tube\"\r\n-      style={{\r\n-        width: tubeWidth,\r\n-        height: tubeHeight,\r\n-        bottom: window.innerHeight - tube.yUpper - tubeHeight,\r\n-      }}\r\n-    />\r\n-    <img\r\n-      className=\"tube-lower\"\r\n-      src={tubeImage}\r\n-      alt=\"Tube\"\r\n-      style={{\r\n-        width: tubeWidth,\r\n-        height: tubeHeight,\r\n-        bottom: tube.yLower,\r\n-        zIndex: 0,\r\n-      }}\r\n-    />\r\n-  </div>\r\n-);\r\n-\r\n-// Main App component\r\n-function App() {\r\n-  // State variables\r\n-  const [basePosition, setBasePosition] = useState(0);\r\n-  const [birdPosition, setBirdPosition] = useState(window.innerHeight / 2);\r\n-  const [birdVelocity, setBirdVelocity] = useState(0);\r\n-  const [gameStarted, setGameStarted] = useState(false);\r\n-  const [gamePaused, setGamePaused] = useState(false);\r\n-  const [gameOver, setGameOver] = useState(false);\r\n-  const [score, setScore] = useState(0);\r\n-  const [highestScore, setHighestScore] = useState(() => {\r\n-    const savedHighestScore = localStorage.getItem(\"highestScore\");\r\n-    return savedHighestScore ? parseInt(savedHighestScore) : 0;\r\n-  });\r\n-  const [tubes, setTubes] = useState([]);\r\n-\r\n-  // Refs\r\n-  const baseRef = useRef(null);\r\n-  const animateRef = useRef(null);\r\n-  const audioRef = useRef(null);\r\n-\r\n-  // Event handlers\r\n-  const handleKeyDown = useCallback(\r\n-    (e) => {\r\n-      if (!gameStarted && e.keyCode === 32) {\r\n-        setGameStarted(true);\r\n-        if (audioRef.current) {\r\n-          audioRef.current.play();\r\n-        }\r\n-      } else if (gameStarted && !gamePaused && e.keyCode === 32) {\r\n-        setBirdVelocity(7);\r\n-      } else if (\r\n-        (e.keyCode === 80 || e.keyCode === 27 || e.keyCode === 32) &&\r\n-        gameStarted &&\r\n-        !gameOver\r\n-      ) {\r\n-        setGamePaused((prevPaused) => !prevPaused);\r\n-      }\r\n-    },\r\n-    [gameStarted, gamePaused, gameOver]\r\n-  );\r\n-\r\n-  const handleKeyPress = useCallback(\r\n-    (e) => {\r\n-      if (e.keyCode === 32 && gameOver) {\r\n-        restartGame();\r\n-      }\r\n-    },\r\n-    [gameOver]\r\n-  );\r\n-\r\n-  // Effects\r\n-  useEffect(() => {\r\n-    window.addEventListener(\"keydown\", handleKeyDown);\r\n-    return () => {\r\n-      window.removeEventListener(\"keydown\", handleKeyDown);\r\n-    };\r\n-  }, [handleKeyDown]);\r\n-\r\n-  useEffect(() => {\r\n-    document.addEventListener(\"keydown\", handleKeyPress);\r\n-    return () => {\r\n-      document.removeEventListener(\"keydown\", handleKeyPress);\r\n-    };\r\n-  }, [handleKeyPress]);\r\n-\r\n-  useEffect(() => {\r\n-    if (score > highestScore) {\r\n-      setHighestScore(score);\r\n-      localStorage.setItem(\"highestScore\", score);\r\n-    }\r\n-  }, [score, highestScore]);\r\n-\r\n-  useEffect(() => {\r\n-    if (audioRef.current) {\r\n-      audioRef.current.src = ding;\r\n-      audioRef.current.load();\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    const detectBaseCollision = () => {\r\n-      const birdRect = document.querySelector(\".bird\").getBoundingClientRect();\r\n-      const baseRect = baseRef.current.getBoundingClientRect();\r\n-      if (birdRect.bottom >= baseRect.top) {\r\n-        setGameOver(true);\r\n-        cancelAnimationFrame(animateRef.current);\r\n-      }\r\n-    };\r\n-\r\n-    const animate = () => {\r\n-      setBirdVelocity((prevVelocity) => prevVelocity + gravity);\r\n-      setBirdPosition((prevPosition) => prevPosition + birdVelocity);\r\n-      setBasePosition(\r\n-        (prevPosition) => (prevPosition + 1) % (window.innerWidth + 100)\r\n-      );\r\n-      setTubes((prevTubes) => {\r\n-        let incrementScore = false;\r\n-        const newTubes = prevTubes\r\n-          .map((tube) => {\r\n-            const newX = tube.x - tubeSpeed;\r\n-            if (newX < 100 && tube.x >= 100) {\r\n-              incrementScore = true;\r\n-              audioRef.current.src = ding;\r\n-              audioRef.current.load();\r\n-            }\r\n-            return { ...tube, x: newX };\r\n-          })\r\n-          .filter((tube) => tube.x > -tubeWidth);\r\n-\r\n-        if (incrementScore) {\r\n-          setScore((prevScore) => prevScore + 1);\r\n-        }\r\n-\r\n-        if (\r\n-          newTubes.length === 0 ||\r\n-          window.innerWidth - newTubes[newTubes.length - 1].x >= tubeGap\r\n-        ) {\r\n-          newTubes.push(generateRandomTubePosition());\r\n-        }\r\n-\r\n-        return newTubes;\r\n-      });\r\n-\r\n-      detectBaseCollision();\r\n-\r\n-      // Check collision with tubes\r\n-      const birdRect = document.querySelector(\".bird\").getBoundingClientRect();\r\n-      tubes.forEach((tube) => {\r\n-        const upperTubeRect = document\r\n-          .querySelector(\".tube-upper\")\r\n-          .getBoundingClientRect();\r\n-        const lowerTubeRect = document\r\n-          .querySelector(\".tube-lower\")\r\n-          .getBoundingClientRect();\r\n-        if (\r\n-          birdRect.right > tube.x &&\r\n-          birdRect.left < tube.x + tubeWidth &&\r\n-          (birdRect.top < upperTubeRect.bottom ||\r\n-            birdRect.bottom > lowerTubeRect.top)\r\n-        ) {\r\n-          setGameOver(true);\r\n-          cancelAnimationFrame(animateRef.current);\r\n-        }\r\n-      });\r\n-\r\n-      // Check collision with base\r\n-      const baseHeight = 50;\r\n-      const birdBottomPosition = birdPosition + 50 - 1; // Assuming bird height as 50\r\n-      if (birdBottomPosition >= window.innerHeight - baseHeight) {\r\n-        setGameOver(true);\r\n-        cancelAnimationFrame(animateRef.current);\r\n-      }\r\n-\r\n-      animateRef.current = requestAnimationFrame(animate);\r\n-    };\r\n-\r\n-    if (gameStarted && !gamePaused && !gameOver) {\r\n-      animateRef.current = requestAnimationFrame(animate);\r\n-    }\r\n-\r\n-    return () => {\r\n-      cancelAnimationFrame(animateRef.current);\r\n-    };\r\n-  }, [gameStarted, gamePaused, birdVelocity, tubes, gameOver, birdPosition]);\r\n-\r\n-  // Restart the game\r\n-  const restartGame = () => {\r\n-    setBasePosition(0);\r\n-    setBirdPosition(window.innerHeight / 2);\r\n-    setBirdVelocity(0);\r\n-    setGameStarted(false);\r\n-    setGamePaused(false);\r\n-    setGameOver(false);\r\n-    setScore(0);\r\n-    setTubes([]);\r\n-  };\r\n-\r\n-  // Render JSX\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {/* Overlay for pause and game over */}\r\n-      <div\r\n-        className={`overlay ${gamePaused || gameOver ? \"overlay-dark\" : \"\"}`}\r\n-        style={{ display: gamePaused ? \"block\" : \"none\" }}\r\n-      />\r\n-      {gamePaused || gameOver ? (\r\n-        <div\r\n-          className=\"overlay\"\r\n-          style={{\r\n-            backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n-            position: \"absolute\",\r\n-            top: 0,\r\n-            left: 0,\r\n-            width: \"100%\",\r\n-            height: \"100%\",\r\n-            zIndex: 9,\r\n-          }}\r\n-        />\r\n-      ) : null}\r\n-      <div\r\n-        className=\"overlay\"\r\n-        style={{ display: gamePaused ? \"block\" : \"none\" }}\r\n-      />\r\n-      {/* Background */}\r\n-      <img src={backgroundImage} alt=\"Background\" className=\"background\" />\r\n-      {/* Tubes */}\r\n-      {tubes.map((tube, index) => (\r\n-        <Tube key={index} tube={tube} />\r\n-      ))}\r\n-      {/* Score display */}\r\n-      <div className=\"score-display\">\r\n-        <h1>SCORE: {score}</h1>\r\n-      </div>\r\n-      {/* Base container */}\r\n-      <div className=\"base-container\">\r\n-        <img\r\n-          src={baseImage}\r\n-          alt=\"Base\"\r\n-          className=\"base\"\r\n-          style={{ left: `${basePosition}px`, bottom: \"0\", zIndex: 1 }}\r\n-          ref={baseRef}\r\n-        />\r\n-        <img\r\n-          src={baseImage}\r\n-          alt=\"Base\"\r\n-          className=\"base\"\r\n-          style={{\r\n-            left: `${basePosition - window.innerWidth - 100}px`,\r\n-            bottom: \"0\",\r\n-          }}\r\n-        />\r\n-      </div>\r\n-      {/* Pause message */}\r\n-      {gamePaused && (\r\n-        <div className=\"pause-message\">\r\n-          <h1>PAUSED</h1>\r\n-          <h2>PRESS ESC OR SPACE TO CONTINUE</h2>\r\n-        </div>\r\n-      )}\r\n-      {/* Bird */}\r\n-      {gameStarted && !gameOver && (\r\n-        <img\r\n-          src={birdImage}\r\n-          alt=\"Bird\"\r\n-          className=\"bird\"\r\n-          style={{ left: \"100px\", bottom: `${birdPosition}px` }}\r\n-        />\r\n-      )}\r\n-      {/* Game over message */}\r\n-      {gameOver && (\r\n-        <div className=\"pause-message\">\r\n-          <h1>GAME OVER</h1>\r\n-          <h1>HIGHEST SCORE: {highestScore}</h1>\r\n-          <h1>PRESS SPACE TO RESTART</h1>\r\n-        </div>\r\n-      )}\r\n-      {/* Start message */}\r\n-      {!gameStarted && !gameOver && (\r\n-        <div className=\"start-message\">\r\n-          <h1>FLAPPY RAMON</h1>\r\n-          <div className=\"bird-container\">\r\n-            <img src={birdImage} alt=\"Bird\" className=\"start-bird\" />\r\n-          </div>\r\n-          <h1>PRESS SPACE TO START</h1>\r\n-        </div>\r\n-      )}\r\n-      {/* Audio */}\r\n-      <audio ref={audioRef} />\r\n-    </div>\r\n-  );\r\n-}\r\n-\r\n-export default App;\r\n"
                },
                {
                    "date": 1711394439216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,326 @@\n+import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\n+import \"./App.css\";\r\n+import backgroundImage from \"./Images/bgdia.png\";\r\n+import baseImage from \"./Images/basex5.jpg\";\r\n+import birdImage from \"./Images/pajaroaletamedia.png\";\r\n+import tubeImage from \"./Images/pipe-green.png\";\r\n+import ding from \"./audio/point.wav\";\r\n+import \"./fonts.css\";\r\n+\r\n+// Constants for game parameters\r\n+const gravity = -0.4;\r\n+const tubeWidth = 52;\r\n+const tubeHeight = 320;\r\n+const tubeGap = 500;\r\n+const tubeSpeed = 5;\r\n+\r\n+// Function to generate random tube position\r\n+const generateRandomTubePosition = () => {\r\n+  const minY = window.innerHeight * -0.01;\r\n+  const maxY = window.innerHeight * -0.15;\r\n+  const randomY = Math.random() * (maxY - minY) + minY;\r\n+  return { x: window.innerWidth, yUpper: randomY, yLower: randomY - 10 };\r\n+};\r\n+\r\n+// Component for rendering tubes\r\n+const Tube = ({ tube }) => (\r\n+  <div\r\n+    className=\"tube\"\r\n+    style={{ position: \"absolute\", left: tube.x, bottom: 0 }}\r\n+  >\r\n+    <img\r\n+      className=\"tube-upper\"\r\n+      src={tubeImage}\r\n+      alt=\"Tube\"\r\n+      style={{\r\n+        width: tubeWidth,\r\n+        height: tubeHeight,\r\n+        bottom: window.innerHeight - tube.yUpper - tubeHeight,\r\n+      }}\r\n+    />\r\n+    <img\r\n+      className=\"tube-lower\"\r\n+      src={tubeImage}\r\n+      alt=\"Tube\"\r\n+      style={{\r\n+        width: tubeWidth,\r\n+        height: tubeHeight,\r\n+        bottom: tube.yLower,\r\n+        zIndex: 0,\r\n+      }}\r\n+    />\r\n+  </div>\r\n+);\r\n+\r\n+// Main App component\r\n+function App() {\r\n+  // State variables\r\n+  const [basePosition, setBasePosition] = useState(0);\r\n+  const [birdPosition, setBirdPosition] = useState(window.innerHeight / 2);\r\n+  const [birdVelocity, setBirdVelocity] = useState(0);\r\n+  const [gameStarted, setGameStarted] = useState(false);\r\n+  const [gamePaused, setGamePaused] = useState(false);\r\n+  const [gameOver, setGameOver] = useState(false);\r\n+  const [score, setScore] = useState(0);\r\n+  const [highestScore, setHighestScore] = useState(() => {\r\n+    const savedHighestScore = localStorage.getItem(\"highestScore\");\r\n+    return savedHighestScore ? parseInt(savedHighestScore) : 0;\r\n+  });\r\n+  const [tubes, setTubes] = useState([]);\r\n+\r\n+  // Refs\r\n+  const baseRef = useRef(null);\r\n+  const animateRef = useRef(null);\r\n+  const audioRef = useRef(null);\r\n+\r\n+  // Event handlers\r\n+  const handleKeyDown = useCallback(\r\n+    (e) => {\r\n+      if (!gameStarted && e.keyCode === 32) {\r\n+        setGameStarted(true);\r\n+        if (audioRef.current) {\r\n+          audioRef.current.play();\r\n+        }\r\n+      } else if (gameStarted && !gamePaused && e.keyCode === 32) {\r\n+        setBirdVelocity(7);\r\n+      } else if (\r\n+        (e.keyCode === 80 || e.keyCode === 27 || e.keyCode === 32) &&\r\n+        gameStarted &&\r\n+        !gameOver\r\n+      ) {\r\n+        setGamePaused((prevPaused) => !prevPaused);\r\n+      }\r\n+    },\r\n+    [gameStarted, gamePaused, gameOver]\r\n+  );\r\n+\r\n+  const handleKeyPress = useCallback(\r\n+    (e) => {\r\n+      if (e.keyCode === 32 && gameOver) {\r\n+        restartGame();\r\n+      }\r\n+    },\r\n+    [gameOver]\r\n+  );\r\n+\r\n+  // Effects\r\n+  useEffect(() => {\r\n+    window.addEventListener(\"keydown\", handleKeyDown);\r\n+    return () => {\r\n+      window.removeEventListener(\"keydown\", handleKeyDown);\r\n+    };\r\n+  }, [handleKeyDown]);\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"keydown\", handleKeyPress);\r\n+    return () => {\r\n+      document.removeEventListener(\"keydown\", handleKeyPress);\r\n+    };\r\n+  }, [handleKeyPress]);\r\n+\r\n+  useEffect(() => {\r\n+    if (score > highestScore) {\r\n+      setHighestScore(score);\r\n+      localStorage.setItem(\"highestScore\", score);\r\n+    }\r\n+  }, [score, highestScore]);\r\n+\r\n+  useEffect(() => {\r\n+    if (incrementScore) {\r\n+      audioRef.current.src = ding;\r\n+      audioRef.current.load();\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    const detectBaseCollision = () => {\r\n+      const birdRect = document.querySelector(\".bird\").getBoundingClientRect();\r\n+      const baseRect = baseRef.current.getBoundingClientRect();\r\n+      if (birdRect.bottom >= baseRect.top) {\r\n+        setGameOver(true);\r\n+        cancelAnimationFrame(animateRef.current);\r\n+      }\r\n+    };\r\n+\r\n+    const animate = () => {\r\n+      setBirdVelocity((prevVelocity) => prevVelocity + gravity);\r\n+      setBirdPosition((prevPosition) => prevPosition + birdVelocity);\r\n+      setBasePosition(\r\n+        (prevPosition) => (prevPosition + 1) % (window.innerWidth + 100)\r\n+      );\r\n+      setTubes((prevTubes) => {\r\n+        let incrementScore = false;\r\n+        const newTubes = prevTubes\r\n+          .map((tube) => {\r\n+            const newX = tube.x - tubeSpeed;\r\n+            if (newX < 100 && tube.x >= 100) {\r\n+              incrementScore = true;\r\n+            }\r\n+            return { ...tube, x: newX };\r\n+          })\r\n+          .filter((tube) => tube.x > -tubeWidth);\r\n+\r\n+        if (incrementScore) {\r\n+          setScore((prevScore) => prevScore + 1);\r\n+        }\r\n+\r\n+        if (\r\n+          newTubes.length === 0 ||\r\n+          window.innerWidth - newTubes[newTubes.length - 1].x >= tubeGap\r\n+        ) {\r\n+          newTubes.push(generateRandomTubePosition());\r\n+        }\r\n+\r\n+        return newTubes;\r\n+      });\r\n+\r\n+      detectBaseCollision();\r\n+\r\n+      // Check collision with tubes\r\n+      const birdRect = document.querySelector(\".bird\").getBoundingClientRect();\r\n+      tubes.forEach((tube) => {\r\n+        const upperTubeRect = document\r\n+          .querySelector(\".tube-upper\")\r\n+          .getBoundingClientRect();\r\n+        const lowerTubeRect = document\r\n+          .querySelector(\".tube-lower\")\r\n+          .getBoundingClientRect();\r\n+        if (\r\n+          birdRect.right > tube.x &&\r\n+          birdRect.left < tube.x + tubeWidth &&\r\n+          (birdRect.top < upperTubeRect.bottom ||\r\n+            birdRect.bottom > lowerTubeRect.top)\r\n+        ) {\r\n+          setGameOver(true);\r\n+          cancelAnimationFrame(animateRef.current);\r\n+        }\r\n+      });\r\n+\r\n+      // Check collision with base\r\n+      const baseHeight = 50;\r\n+      const birdBottomPosition = birdPosition + 50 - 1; // Assuming bird height as 50\r\n+      if (birdBottomPosition >= window.innerHeight - baseHeight) {\r\n+        setGameOver(true);\r\n+        cancelAnimationFrame(animateRef.current);\r\n+      }\r\n+\r\n+      animateRef.current = requestAnimationFrame(animate);\r\n+    };\r\n+\r\n+    if (gameStarted && !gamePaused && !gameOver) {\r\n+      animateRef.current = requestAnimationFrame(animate);\r\n+    }\r\n+\r\n+    return () => {\r\n+      cancelAnimationFrame(animateRef.current);\r\n+    };\r\n+  }, [gameStarted, gamePaused, birdVelocity, tubes, gameOver, birdPosition]);\r\n+\r\n+  // Restart the game\r\n+  const restartGame = () => {\r\n+    setBasePosition(0);\r\n+    setBirdPosition(window.innerHeight / 2);\r\n+    setBirdVelocity(0);\r\n+    setGameStarted(false);\r\n+    setGamePaused(false);\r\n+    setGameOver(false);\r\n+    setScore(0);\r\n+    setTubes([]);\r\n+  };\r\n+\r\n+  // Render JSX\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {/* Overlay for pause and game over */}\r\n+      <div\r\n+        className={`overlay ${gamePaused || gameOver ? \"overlay-dark\" : \"\"}`}\r\n+        style={{ display: gamePaused ? \"block\" : \"none\" }}\r\n+      />\r\n+      {gamePaused || gameOver ? (\r\n+        <div\r\n+          className=\"overlay\"\r\n+          style={{\r\n+            backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n+            position: \"absolute\",\r\n+            top: 0,\r\n+            left: 0,\r\n+            width: \"100%\",\r\n+            height: \"100%\",\r\n+            zIndex: 9,\r\n+          }}\r\n+        />\r\n+      ) : null}\r\n+      <div\r\n+        className=\"overlay\"\r\n+        style={{ display: gamePaused ? \"block\" : \"none\" }}\r\n+      />\r\n+      {/* Background */}\r\n+      <img src={backgroundImage} alt=\"Background\" className=\"background\" />\r\n+      {/* Tubes */}\r\n+      {tubes.map((tube, index) => (\r\n+        <Tube key={index} tube={tube} />\r\n+      ))}\r\n+      {/* Score display */}\r\n+      <div className=\"score-display\">\r\n+        <h1>SCORE: {score}</h1>\r\n+      </div>\r\n+      {/* Base container */}\r\n+      <div className=\"base-container\">\r\n+        <img\r\n+          src={baseImage}\r\n+          alt=\"Base\"\r\n+          className=\"base\"\r\n+          style={{ left: `${basePosition}px`, bottom: \"0\", zIndex: 1 }}\r\n+          ref={baseRef}\r\n+        />\r\n+        <img\r\n+          src={baseImage}\r\n+          alt=\"Base\"\r\n+          className=\"base\"\r\n+          style={{\r\n+            left: `${basePosition - window.innerWidth - 100}px`,\r\n+            bottom: \"0\",\r\n+          }}\r\n+        />\r\n+      </div>\r\n+      {/* Pause message */}\r\n+      {gamePaused && (\r\n+        <div className=\"pause-message\">\r\n+          <h1>PAUSED</h1>\r\n+          <h2>PRESS ESC OR SPACE TO CONTINUE</h2>\r\n+        </div>\r\n+      )}\r\n+      {/* Bird */}\r\n+      {gameStarted && !gameOver && (\r\n+        <img\r\n+          src={birdImage}\r\n+          alt=\"Bird\"\r\n+          className=\"bird\"\r\n+          style={{ left: \"100px\", bottom: `${birdPosition}px` }}\r\n+        />\r\n+      )}\r\n+      {/* Game over message */}\r\n+      {gameOver && (\r\n+        <div className=\"pause-message\">\r\n+          <h1>GAME OVER</h1>\r\n+          <h1>HIGHEST SCORE: {highestScore}</h1>\r\n+          <h1>PRESS SPACE TO RESTART</h1>\r\n+        </div>\r\n+      )}\r\n+      {/* Start message */}\r\n+      {!gameStarted && !gameOver && (\r\n+        <div className=\"start-message\">\r\n+          <h1>FLAPPY RAMON</h1>\r\n+          <div className=\"bird-container\">\r\n+            <img src={birdImage} alt=\"Bird\" className=\"start-bird\" />\r\n+          </div>\r\n+          <h1>PRESS SPACE TO START</h1>\r\n+        </div>\r\n+      )}\r\n+      {/* Audio */}\r\n+      <audio ref={audioRef} />\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1711394507739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,10 +126,9 @@\n   }, [score, highestScore]);\r\n \r\n   useEffect(() => {\r\n     if (incrementScore) {\r\n-      audioRef.current.src = ding;\r\n-      audioRef.current.load();\r\n+      \r\n     }\r\n   }, []);\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1711394515797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,14 +124,10 @@\n       localStorage.setItem(\"highestScore\", score);\r\n     }\r\n   }, [score, highestScore]);\r\n \r\n-  useEffect(() => {\r\n-    if (incrementScore) {\r\n-      \r\n-    }\r\n-  }, []);\r\n \r\n+\r\n   useEffect(() => {\r\n     const detectBaseCollision = () => {\r\n       const birdRect = document.querySelector(\".bird\").getBoundingClientRect();\r\n       const baseRect = baseRef.current.getBoundingClientRect();\r\n@@ -160,335 +156,10 @@\n           .filter((tube) => tube.x > -tubeWidth);\r\n \r\n         if (incrementScore) {\r\n           setScore((prevScore) => prevScore + 1);\r\n-        }\r\n-\r\n-        if (\r\n-          newTubes.length === 0 ||\r\n-          window.innerWidth - newTubes[newTubes.length - 1].x >= tubeGap\r\n-        ) {\r\n-          newTubes.push(generateRandomTubePosition());\r\n-        }\r\n-\r\n-        return newTubes;\r\n-      });\r\n-\r\n-      detectBaseCollision();\r\n-\r\n-      // Check collision with tubes\r\n-      const birdRect = document.querySelector(\".bird\").getBoundingClientRect();\r\n-      tubes.forEach((tube) => {\r\n-        const upperTubeRect = document\r\n-          .querySelector(\".tube-upper\")\r\n-          .getBoundingClientRect();\r\n-        const lowerTubeRect = document\r\n-          .querySelector(\".tube-lower\")\r\n-          .getBoundingClientRect();\r\n-        if (\r\n-          birdRect.right > tube.x &&\r\n-          birdRect.left < tube.x + tubeWidth &&\r\n-          (birdRect.top < upperTubeRect.bottom ||\r\n-            birdRect.bottom > lowerTubeRect.top)\r\n-        ) {\r\n-          setGameOver(true);\r\n-          cancelAnimationFrame(animateRef.current);\r\n-        }\r\n-      });\r\n-\r\n-      // Check collision with base\r\n-      const baseHeight = 50;\r\n-      const birdBottomPosition = birdPosition + 50 - 1; // Assuming bird height as 50\r\n-      if (birdBottomPosition >= window.innerHeight - baseHeight) {\r\n-        setGameOver(true);\r\n-        cancelAnimationFrame(animateRef.current);\r\n-      }\r\n-\r\n-      animateRef.current = requestAnimationFrame(animate);\r\n-    };\r\n-\r\n-    if (gameStarted && !gamePaused && !gameOver) {\r\n-      animateRef.current = requestAnimationFrame(animate);\r\n-    }\r\n-\r\n-    return () => {\r\n-      cancelAnimationFrame(animateRef.current);\r\n-    };\r\n-  }, [gameStarted, gamePaused, birdVelocity, tubes, gameOver, birdPosition]);\r\n-\r\n-  // Restart the game\r\n-  const restartGame = () => {\r\n-    setBasePosition(0);\r\n-    setBirdPosition(window.innerHeight / 2);\r\n-    setBirdVelocity(0);\r\n-    setGameStarted(false);\r\n-    setGamePaused(false);\r\n-    setGameOver(false);\r\n-    setScore(0);\r\n-    setTubes([]);\r\n-  };\r\n-\r\n-  // Render JSX\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {/* Overlay for pause and game over */}\r\n-      <div\r\n-        className={`overlay ${gamePaused || gameOver ? \"overlay-dark\" : \"\"}`}\r\n-        style={{ display: gamePaused ? \"block\" : \"none\" }}\r\n-      />\r\n-      {gamePaused || gameOver ? (\r\n-        <div\r\n-          className=\"overlay\"\r\n-          style={{\r\n-            backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n-            position: \"absolute\",\r\n-            top: 0,\r\n-            left: 0,\r\n-            width: \"100%\",\r\n-            height: \"100%\",\r\n-            zIndex: 9,\r\n-          }}\r\n-        />\r\n-      ) : null}\r\n-      <div\r\n-        className=\"overlay\"\r\n-        style={{ display: gamePaused ? \"block\" : \"none\" }}\r\n-      />\r\n-      {/* Background */}\r\n-      <img src={backgroundImage} alt=\"Background\" className=\"background\" />\r\n-      {/* Tubes */}\r\n-      {tubes.map((tube, index) => (\r\n-        <Tube key={index} tube={tube} />\r\n-      ))}\r\n-      {/* Score display */}\r\n-      <div className=\"score-display\">\r\n-        <h1>SCORE: {score}</h1>\r\n-      </div>\r\n-      {/* Base container */}\r\n-      <div className=\"base-container\">\r\n-        <img\r\n-          src={baseImage}\r\n-          alt=\"Base\"\r\n-          className=\"base\"\r\n-          style={{ left: `${basePosition}px`, bottom: \"0\", zIndex: 1 }}\r\n-          ref={baseRef}\r\n-        />\r\n-        <img\r\n-          src={baseImage}\r\n-          alt=\"Base\"\r\n-          className=\"base\"\r\n-          style={{\r\n-            left: `${basePosition - window.innerWidth - 100}px`,\r\n-            bottom: \"0\",\r\n-          }}\r\n-        />\r\n-      </div>\r\n-      {/* Pause message */}\r\n-      {gamePaused && (\r\n-        <div className=\"pause-message\">\r\n-          <h1>PAUSED</h1>\r\n-          <h2>PRESS ESC OR SPACE TO CONTINUE</h2>\r\n-        </div>\r\n-      )}\r\n-      {/* Bird */}\r\n-      {gameStarted && !gameOver && (\r\n-        <img\r\n-          src={birdImage}\r\n-          alt=\"Bird\"\r\n-          className=\"bird\"\r\n-          style={{ left: \"100px\", bottom: `${birdPosition}px` }}\r\n-        />\r\n-      )}\r\n-      {/* Game over message */}\r\n-      {gameOver && (\r\n-        <div className=\"pause-message\">\r\n-          <h1>GAME OVER</h1>\r\n-          <h1>HIGHEST SCORE: {highestScore}</h1>\r\n-          <h1>PRESS SPACE TO RESTART</h1>\r\n-        </div>\r\n-      )}\r\n-      {/* Start message */}\r\n-      {!gameStarted && !gameOver && (\r\n-        <div className=\"start-message\">\r\n-          <h1>FLAPPY RAMON</h1>\r\n-          <div className=\"bird-container\">\r\n-            <img src={birdImage} alt=\"Bird\" className=\"start-bird\" />\r\n-          </div>\r\n-          <h1>PRESS SPACE TO START</h1>\r\n-        </div>\r\n-      )}\r\n-      {/* Audio */}\r\n-      <audio ref={audioRef} />\r\n-    </div>\r\n-  );\r\n-}\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\n-import \"./App.css\";\r\n-import backgroundImage from \"./Images/bgdia.png\";\r\n-import baseImage from \"./Images/basex5.jpg\";\r\n-import birdImage from \"./Images/pajaroaletamedia.png\";\r\n-import tubeImage from \"./Images/pipe-green.png\";\r\n-import ding from \"./audio/point.wav\";\r\n-import \"./fonts.css\";\r\n-\r\n-// Constants for game parameters\r\n-const gravity = -0.4;\r\n-const tubeWidth = 52;\r\n-const tubeHeight = 320;\r\n-const tubeGap = 500;\r\n-const tubeSpeed = 5;\r\n-\r\n-// Function to generate random tube position\r\n-const generateRandomTubePosition = () => {\r\n-  const minY = window.innerHeight * -0.01;\r\n-  const maxY = window.innerHeight * -0.15;\r\n-  const randomY = Math.random() * (maxY - minY) + minY;\r\n-  return { x: window.innerWidth, yUpper: randomY, yLower: randomY - 10 };\r\n-};\r\n-\r\n-// Component for rendering tubes\r\n-const Tube = ({ tube }) => (\r\n-  <div\r\n-    className=\"tube\"\r\n-    style={{ position: \"absolute\", left: tube.x, bottom: 0 }}\r\n-  >\r\n-    <img\r\n-      className=\"tube-upper\"\r\n-      src={tubeImage}\r\n-      alt=\"Tube\"\r\n-      style={{\r\n-        width: tubeWidth,\r\n-        height: tubeHeight,\r\n-        bottom: window.innerHeight - tube.yUpper - tubeHeight,\r\n-      }}\r\n-    />\r\n-    <img\r\n-      className=\"tube-lower\"\r\n-      src={tubeImage}\r\n-      alt=\"Tube\"\r\n-      style={{\r\n-        width: tubeWidth,\r\n-        height: tubeHeight,\r\n-        bottom: tube.yLower,\r\n-        zIndex: 0,\r\n-      }}\r\n-    />\r\n-  </div>\r\n-);\r\n-\r\n-// Main App component\r\n-function App() {\r\n-  // State variables\r\n-  const [basePosition, setBasePosition] = useState(0);\r\n-  const [birdPosition, setBirdPosition] = useState(window.innerHeight / 2);\r\n-  const [birdVelocity, setBirdVelocity] = useState(0);\r\n-  const [gameStarted, setGameStarted] = useState(false);\r\n-  const [gamePaused, setGamePaused] = useState(false);\r\n-  const [gameOver, setGameOver] = useState(false);\r\n-  const [score, setScore] = useState(0);\r\n-  const [highestScore, setHighestScore] = useState(() => {\r\n-    const savedHighestScore = localStorage.getItem(\"highestScore\");\r\n-    return savedHighestScore ? parseInt(savedHighestScore) : 0;\r\n-  });\r\n-  const [tubes, setTubes] = useState([]);\r\n-\r\n-  // Refs\r\n-  const baseRef = useRef(null);\r\n-  const animateRef = useRef(null);\r\n-  const audioRef = useRef(null);\r\n-\r\n-  // Event handlers\r\n-  const handleKeyDown = useCallback(\r\n-    (e) => {\r\n-      if (!gameStarted && e.keyCode === 32) {\r\n-        setGameStarted(true);\r\n-        if (audioRef.current) {\r\n-          audioRef.current.play();\r\n-        }\r\n-      } else if (gameStarted && !gamePaused && e.keyCode === 32) {\r\n-        setBirdVelocity(7);\r\n-      } else if (\r\n-        (e.keyCode === 80 || e.keyCode === 27 || e.keyCode === 32) &&\r\n-        gameStarted &&\r\n-        !gameOver\r\n-      ) {\r\n-        setGamePaused((prevPaused) => !prevPaused);\r\n-      }\r\n-    },\r\n-    [gameStarted, gamePaused, gameOver]\r\n-  );\r\n-\r\n-  const handleKeyPress = useCallback(\r\n-    (e) => {\r\n-      if (e.keyCode === 32 && gameOver) {\r\n-        restartGame();\r\n-      }\r\n-    },\r\n-    [gameOver]\r\n-  );\r\n-\r\n-  // Effects\r\n-  useEffect(() => {\r\n-    window.addEventListener(\"keydown\", handleKeyDown);\r\n-    return () => {\r\n-      window.removeEventListener(\"keydown\", handleKeyDown);\r\n-    };\r\n-  }, [handleKeyDown]);\r\n-\r\n-  useEffect(() => {\r\n-    document.addEventListener(\"keydown\", handleKeyPress);\r\n-    return () => {\r\n-      document.removeEventListener(\"keydown\", handleKeyPress);\r\n-    };\r\n-  }, [handleKeyPress]);\r\n-\r\n-  useEffect(() => {\r\n-    if (score > highestScore) {\r\n-      setHighestScore(score);\r\n-      localStorage.setItem(\"highestScore\", score);\r\n-    }\r\n-  }, [score, highestScore]);\r\n-\r\n-  useEffect(() => {\r\n-    if () {\r\n-      audioRef.current.src = ding;\r\n+          audioRef.current.src = ding;\r\n       audioRef.current.load();\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    const detectBaseCollision = () => {\r\n-      const birdRect = document.querySelector(\".bird\").getBoundingClientRect();\r\n-      const baseRect = baseRef.current.getBoundingClientRect();\r\n-      if (birdRect.bottom >= baseRect.top) {\r\n-        setGameOver(true);\r\n-        cancelAnimationFrame(animateRef.current);\r\n-      }\r\n-    };\r\n-\r\n-    const animate = () => {\r\n-      setBirdVelocity((prevVelocity) => prevVelocity + gravity);\r\n-      setBirdPosition((prevPosition) => prevPosition + birdVelocity);\r\n-      setBasePosition(\r\n-        (prevPosition) => (prevPosition + 1) % (window.innerWidth + 100)\r\n-      );\r\n-      setTubes((prevTubes) => {\r\n-        let incrementScore = false;\r\n-        const newTubes = prevTubes\r\n-          .map((tube) => {\r\n-            const newX = tube.x - tubeSpeed;\r\n-            if (newX < 100 && tube.x >= 100) {\r\n-              incrementScore = true;\r\n-              \r\n-            }\r\n-            return { ...tube, x: newX };\r\n-          })\r\n-          .filter((tube) => tube.x > -tubeWidth);\r\n-\r\n-        if (incrementScore) {\r\n-          setScore((prevScore) => prevScore + 1);\r\n         }\r\n \r\n         if (\r\n           newTubes.length === 0 ||\r\n"
                },
                {
                    "date": 1711394584747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,10 +156,9 @@\n           .filter((tube) => tube.x > -tubeWidth);\r\n \r\n         if (incrementScore) {\r\n           setScore((prevScore) => prevScore + 1);\r\n-          audioRef.current.src = ding;\r\n-      audioRef.current.load();\r\n+          \r\n         }\r\n \r\n         if (\r\n           newTubes.length === 0 ||\r\n"
                },
                {
                    "date": 1711394627257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,9 +156,9 @@\n           .filter((tube) => tube.x > -tubeWidth);\r\n \r\n         if (incrementScore) {\r\n           setScore((prevScore) => prevScore + 1);\r\n-          \r\n+\r\n         }\r\n \r\n         if (\r\n           newTubes.length === 0 ||\r\n"
                },
                {
                    "date": 1711394637079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,10 +124,15 @@\n       localStorage.setItem(\"highestScore\", score);\r\n     }\r\n   }, [score, highestScore]);\r\n \r\n+  useEffect(() => {\r\n+    if () {\r\n+      audioRef.current.src = ding;\r\n+      audioRef.current.load();\r\n+    }\r\n+  }, []);\r\n \r\n-\r\n   useEffect(() => {\r\n     const detectBaseCollision = () => {\r\n       const birdRect = document.querySelector(\".bird\").getBoundingClientRect();\r\n       const baseRect = baseRef.current.getBoundingClientRect();\r\n@@ -149,16 +154,16 @@\n           .map((tube) => {\r\n             const newX = tube.x - tubeSpeed;\r\n             if (newX < 100 && tube.x >= 100) {\r\n               incrementScore = true;\r\n+\r\n             }\r\n             return { ...tube, x: newX };\r\n           })\r\n           .filter((tube) => tube.x > -tubeWidth);\r\n \r\n         if (incrementScore) {\r\n           setScore((prevScore) => prevScore + 1);\r\n-\r\n         }\r\n \r\n         if (\r\n           newTubes.length === 0 ||\r\n"
                },
                {
                    "date": 1711394643635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,10 +154,8 @@\n           .map((tube) => {\r\n             const newX = tube.x - tubeSpeed;\r\n             if (newX < 100 && tube.x >= 100) {\r\n               incrementScore = true;\r\n-              audioRef.current.src = ding;\r\n-              audioRef.current.load();\r\n             }\r\n             return { ...tube, x: newX };\r\n           })\r\n           .filter((tube) => tube.x > -tubeWidth);\r\n"
                },
                {
                    "date": 1711394762592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,337 @@\n+import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\n+import \"./App.css\";\r\n+import backgroundImage from \"./Images/bgdia.png\";\r\n+import baseImage from \"./Images/basex5.jpg\";\r\n+import birdImage from \"./Images/pajaroaletamedia.png\";\r\n+import tubeImage from \"./Images/pipe-green.png\";\r\n+import ding from \"./audio/point.wav\";\r\n+import \"./fonts.css\";\r\n+\r\n+// Constants for game parameters\r\n+const gravity = -0.4;\r\n+const tubeWidth = 52;\r\n+const tubeHeight = 320;\r\n+const tubeGap = 500;\r\n+const tubeSpeed = 5;\r\n+\r\n+// Function to generate random tube position\r\n+const generateRandomTubePosition = () => {\r\n+  const minY = window.innerHeight * -0.01;\r\n+  const maxY = window.innerHeight * -0.15;\r\n+  const randomY = Math.random() * (maxY - minY) + minY;\r\n+  return { x: window.innerWidth, yUpper: randomY, yLower: randomY - 10 };\r\n+};\r\n+\r\n+// Component for rendering tubes\r\n+const Tube = ({ tube }) => (\r\n+  <div\r\n+    className=\"tube\"\r\n+    style={{ position: \"absolute\", left: tube.x, bottom: 0 }}\r\n+  >\r\n+    <img\r\n+      className=\"tube-upper\"\r\n+      src={tubeImage}\r\n+      alt=\"Tube\"\r\n+      style={{\r\n+        width: tubeWidth,\r\n+        height: tubeHeight,\r\n+        bottom: window.innerHeight - tube.yUpper - tubeHeight,\r\n+      }}\r\n+    />\r\n+    <img\r\n+      className=\"tube-lower\"\r\n+      src={tubeImage}\r\n+      alt=\"Tube\"\r\n+      style={{\r\n+        width: tubeWidth,\r\n+        height: tubeHeight,\r\n+        bottom: tube.yLower,\r\n+        zIndex: 0,\r\n+      }}\r\n+    />\r\n+  </div>\r\n+);\r\n+\r\n+// Main App component\r\n+function App() {\r\n+  // State variables\r\n+  const [basePosition, setBasePosition] = useState(0);\r\n+  const [birdPosition, setBirdPosition] = useState(window.innerHeight / 2);\r\n+  const [birdVelocity, setBirdVelocity] = useState(0);\r\n+  const [gameStarted, setGameStarted] = useState(false);\r\n+  const [gamePaused, setGamePaused] = useState(false);\r\n+  const [gameOver, setGameOver] = useState(false);\r\n+  const [score, setScore] = useState(0);\r\n+  const [highestScore, setHighestScore] = useState(() => {\r\n+    const savedHighestScore = localStorage.getItem(\"highestScore\");\r\n+    return savedHighestScore ? parseInt(savedHighestScore) : 0;\r\n+  });\r\n+  const [tubes, setTubes] = useState([]);\r\n+\r\n+  // Refs\r\n+  const baseRef = useRef(null);\r\n+  const animateRef = useRef(null);\r\n+  const audioRef = useRef(null);\r\n+\r\n+  // Event handlers\r\n+  const handleKeyDown = useCallback(\r\n+    (e) => {\r\n+      if (!gameStarted && e.keyCode === 32) {\r\n+        setGameStarted(true);\r\n+        if (audioRef.current) {\r\n+          audioRef.current.play();\r\n+        }\r\n+      } else if (gameStarted && !gamePaused && e.keyCode === 32) {\r\n+        setBirdVelocity(7);\r\n+      } else if (\r\n+        (e.keyCode === 80 || e.keyCode === 27 || e.keyCode === 32) &&\r\n+        gameStarted &&\r\n+        !gameOver\r\n+      ) {\r\n+        setGamePaused((prevPaused) => !prevPaused);\r\n+      }\r\n+    },\r\n+    [gameStarted, gamePaused, gameOver]\r\n+  );\r\n+\r\n+  const handleKeyPress = useCallback(\r\n+    (e) => {\r\n+      if (e.keyCode === 32 && gameOver) {\r\n+        restartGame();\r\n+      }\r\n+    },\r\n+    [gameOver]\r\n+  );\r\n+\r\n+  // Effects\r\n+  useEffect(() => {\r\n+    window.addEventListener(\"keydown\", handleKeyDown);\r\n+    return () => {\r\n+      window.removeEventListener(\"keydown\", handleKeyDown);\r\n+    };\r\n+  }, [handleKeyDown]);\r\n+\r\n+  useEffect(() => {\r\n+    document.addEventListener(\"keydown\", handleKeyPress);\r\n+    return () => {\r\n+      document.removeEventListener(\"keydown\", handleKeyPress);\r\n+    };\r\n+  }, [handleKeyPress]);\r\n+\r\n+  useEffect(() => {\r\n+    if (score > highestScore) {\r\n+      setHighestScore(score);\r\n+      localStorage.setItem(\"highestScore\", score);\r\n+    }\r\n+  }, [score, highestScore]);\r\n+\r\n+  useEffect(() => {\r\n+    if () {\r\n+      audioRef.current.src = ding;\r\n+      audioRef.current.load();\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+  if (score > highestScore) {\r\n+    setHighestScore(score);\r\n+    localStorage.setItem(\"highestScore\", score);\r\n+    if (audioRef.current) {\r\n+      audioRef.current.src = ding;\r\n+      audioRef.current.play();\r\n+    }\r\n+  }\r\n+}, [score, highestScore]);\r\n+\r\n+  useEffect(() => {\r\n+    const detectBaseCollision = () => {\r\n+      const birdRect = document.querySelector(\".bird\").getBoundingClientRect();\r\n+      const baseRect = baseRef.current.getBoundingClientRect();\r\n+      if (birdRect.bottom >= baseRect.top) {\r\n+        setGameOver(true);\r\n+        cancelAnimationFrame(animateRef.current);\r\n+      }\r\n+    };\r\n+\r\n+    const animate = () => {\r\n+      setBirdVelocity((prevVelocity) => prevVelocity + gravity);\r\n+      setBirdPosition((prevPosition) => prevPosition + birdVelocity);\r\n+      setBasePosition(\r\n+        (prevPosition) => (prevPosition + 1) % (window.innerWidth + 100)\r\n+      );\r\n+      setTubes((prevTubes) => {\r\n+        let incrementScore = false;\r\n+        const newTubes = prevTubes\r\n+          .map((tube) => {\r\n+            const newX = tube.x - tubeSpeed;\r\n+            if (newX < 100 && tube.x >= 100) {\r\n+              incrementScore = true;\r\n+            }\r\n+            return { ...tube, x: newX };\r\n+          })\r\n+          .filter((tube) => tube.x > -tubeWidth);\r\n+\r\n+        if (incrementScore) {\r\n+          setScore((prevScore) => prevScore + 1);\r\n+        }\r\n+\r\n+        if (\r\n+          newTubes.length === 0 ||\r\n+          window.innerWidth - newTubes[newTubes.length - 1].x >= tubeGap\r\n+        ) {\r\n+          newTubes.push(generateRandomTubePosition());\r\n+        }\r\n+\r\n+        return newTubes;\r\n+      });\r\n+\r\n+      detectBaseCollision();\r\n+\r\n+      // Check collision with tubes\r\n+      const birdRect = document.querySelector(\".bird\").getBoundingClientRect();\r\n+      tubes.forEach((tube) => {\r\n+        const upperTubeRect = document\r\n+          .querySelector(\".tube-upper\")\r\n+          .getBoundingClientRect();\r\n+        const lowerTubeRect = document\r\n+          .querySelector(\".tube-lower\")\r\n+          .getBoundingClientRect();\r\n+        if (\r\n+          birdRect.right > tube.x &&\r\n+          birdRect.left < tube.x + tubeWidth &&\r\n+          (birdRect.top < upperTubeRect.bottom ||\r\n+            birdRect.bottom > lowerTubeRect.top)\r\n+        ) {\r\n+          setGameOver(true);\r\n+          cancelAnimationFrame(animateRef.current);\r\n+        }\r\n+      });\r\n+\r\n+      // Check collision with base\r\n+      const baseHeight = 50;\r\n+      const birdBottomPosition = birdPosition + 50 - 1; // Assuming bird height as 50\r\n+      if (birdBottomPosition >= window.innerHeight - baseHeight) {\r\n+        setGameOver(true);\r\n+        cancelAnimationFrame(animateRef.current);\r\n+      }\r\n+\r\n+      animateRef.current = requestAnimationFrame(animate);\r\n+    };\r\n+\r\n+    if (gameStarted && !gamePaused && !gameOver) {\r\n+      animateRef.current = requestAnimationFrame(animate);\r\n+    }\r\n+\r\n+    return () => {\r\n+      cancelAnimationFrame(animateRef.current);\r\n+    };\r\n+  }, [gameStarted, gamePaused, birdVelocity, tubes, gameOver, birdPosition]);\r\n+\r\n+  // Restart the game\r\n+  const restartGame = () => {\r\n+    setBasePosition(0);\r\n+    setBirdPosition(window.innerHeight / 2);\r\n+    setBirdVelocity(0);\r\n+    setGameStarted(false);\r\n+    setGamePaused(false);\r\n+    setGameOver(false);\r\n+    setScore(0);\r\n+    setTubes([]);\r\n+  };\r\n+\r\n+  // Render JSX\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {/* Overlay for pause and game over */}\r\n+      <div\r\n+        className={`overlay ${gamePaused || gameOver ? \"overlay-dark\" : \"\"}`}\r\n+        style={{ display: gamePaused ? \"block\" : \"none\" }}\r\n+      />\r\n+      {gamePaused || gameOver ? (\r\n+        <div\r\n+          className=\"overlay\"\r\n+          style={{\r\n+            backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n+            position: \"absolute\",\r\n+            top: 0,\r\n+            left: 0,\r\n+            width: \"100%\",\r\n+            height: \"100%\",\r\n+            zIndex: 9,\r\n+          }}\r\n+        />\r\n+      ) : null}\r\n+      <div\r\n+        className=\"overlay\"\r\n+        style={{ display: gamePaused ? \"block\" : \"none\" }}\r\n+      />\r\n+      {/* Background */}\r\n+      <img src={backgroundImage} alt=\"Background\" className=\"background\" />\r\n+      {/* Tubes */}\r\n+      {tubes.map((tube, index) => (\r\n+        <Tube key={index} tube={tube} />\r\n+      ))}\r\n+      {/* Score display */}\r\n+      <div className=\"score-display\">\r\n+        <h1>SCORE: {score}</h1>\r\n+      </div>\r\n+      {/* Base container */}\r\n+      <div className=\"base-container\">\r\n+        <img\r\n+          src={baseImage}\r\n+          alt=\"Base\"\r\n+          className=\"base\"\r\n+          style={{ left: `${basePosition}px`, bottom: \"0\", zIndex: 1 }}\r\n+          ref={baseRef}\r\n+        />\r\n+        <img\r\n+          src={baseImage}\r\n+          alt=\"Base\"\r\n+          className=\"base\"\r\n+          style={{\r\n+            left: `${basePosition - window.innerWidth - 100}px`,\r\n+            bottom: \"0\",\r\n+          }}\r\n+        />\r\n+      </div>\r\n+      {/* Pause message */}\r\n+      {gamePaused && (\r\n+        <div className=\"pause-message\">\r\n+          <h1>PAUSED</h1>\r\n+          <h2>PRESS ESC OR SPACE TO CONTINUE</h2>\r\n+        </div>\r\n+      )}\r\n+      {/* Bird */}\r\n+      {gameStarted && !gameOver && (\r\n+        <img\r\n+          src={birdImage}\r\n+          alt=\"Bird\"\r\n+          className=\"bird\"\r\n+          style={{ left: \"100px\", bottom: `${birdPosition}px` }}\r\n+        />\r\n+      )}\r\n+      {/* Game over message */}\r\n+      {gameOver && (\r\n+        <div className=\"pause-message\">\r\n+          <h1>GAME OVER</h1>\r\n+          <h1>HIGHEST SCORE: {highestScore}</h1>\r\n+          <h1>PRESS SPACE TO RESTART</h1>\r\n+        </div>\r\n+      )}\r\n+      {/* Start message */}\r\n+      {!gameStarted && !gameOver && (\r\n+        <div className=\"start-message\">\r\n+          <h1>FLAPPY RAMON</h1>\r\n+          <div className=\"bird-container\">\r\n+            <img src={birdImage} alt=\"Bird\" className=\"start-bird\" />\r\n+          </div>\r\n+          <h1>PRESS SPACE TO START</h1>\r\n+        </div>\r\n+      )}\r\n+      {/* Audio */}\r\n+      <audio ref={audioRef} />\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+export default App;\r\n"
                }
            ],
            "date": 1711393863089,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport \"./App.css\";\r\nimport backgroundImage from \"./Images/bgdia.png\";\r\nimport baseImage from \"./Images/basex5.jpg\";\r\nimport birdImage from \"./Images/ramos/ramon1.png\";\r\nimport tubeImage from \"./Images/pipes/pen2.png\";\r\nimport \"./fonts.css\";\r\n\r\n// Constants for game parameters\r\nconst gravity = -0.4;\r\nconst tubeWidth = 52;\r\nconst tubeHeight = 320;\r\nconst tubeGap = 500;\r\nconst tubeSpeed = 5;\r\n\r\n// Function to generate random tube position\r\nconst generateRandomTubePosition = () => {\r\n  const minY = window.innerHeight * -0.01;\r\n  const maxY = window.innerHeight * -0.15;\r\n  const randomY = Math.random() * (maxY - minY) + minY;\r\n  return { x: window.innerWidth, yUpper: randomY, yLower: randomY - 10 };\r\n};\r\n\r\n// Component for rendering tubes\r\nconst Tube = ({ tube }) => (\r\n  <div className=\"tube\" style={{ position: \"absolute\", left: tube.x, bottom: 0 }}>\r\n    <img\r\n      className=\"tube-upper\"\r\n      src={tubeImage}\r\n      alt=\"Tube\"\r\n      style={{\r\n        width: tubeWidth,\r\n        height: tubeHeight,\r\n        bottom: window.innerHeight - tube.yUpper - tubeHeight,\r\n      }}\r\n    />\r\n    <img\r\n      className=\"tube-lower\"\r\n      src={tubeImage}\r\n      alt=\"Tube\"\r\n      style={{\r\n        width: tubeWidth,\r\n        height: tubeHeight,\r\n        bottom: tube.yLower,\r\n        zIndex: 0,\r\n      }}\r\n    />\r\n  </div>\r\n);\r\n\r\n// Main App component\r\nfunction App() {\r\n  // State variables\r\n  const [basePosition, setBasePosition] = useState(0);\r\n  const [birdPosition, setBirdPosition] = useState(window.innerHeight / 2);\r\n  const [birdVelocity, setBirdVelocity] = useState(0);\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [gamePaused, setGamePaused] = useState(false);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [highestScore, setHighestScore] = useState(() => {\r\n    const savedHighestScore = localStorage.getItem(\"highestScore\");\r\n    return savedHighestScore ? parseInt(savedHighestScore) : 0;\r\n  });\r\n  const [tubes, setTubes] = useState([]);\r\n  \r\n  // Refs\r\n  const baseRef = useRef(null);\r\n  const animateRef = useRef(null);\r\n  const audioRef = useRef(null);\r\n\r\n  // Event handlers\r\n  const handleKeyDown = useCallback((e) => {\r\n    if (!gameStarted && e.keyCode === 32) {\r\n      setGameStarted(true);\r\n      if (audioRef.current) {\r\n        audioRef.current.play();\r\n      }\r\n    } else if (gameStarted && !gamePaused && e.keyCode === 32) {\r\n      setBirdVelocity(7);\r\n    } else if ((e.keyCode === 80 || e.keyCode === 27 || e.keyCode === 32) && gameStarted && !gameOver) {\r\n      setGamePaused((prevPaused) => !prevPaused);\r\n    }\r\n  }, [gameStarted, gamePaused, gameOver]);\r\n\r\n  const handleKeyPress = useCallback((e) => {\r\n    if (e.keyCode === 32 && gameOver) {\r\n      restartGame();\r\n    }\r\n  }, [gameOver]);\r\n\r\n  // Effects\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleKeyDown);\r\n    };\r\n  }, [handleKeyDown]);\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", handleKeyPress);\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleKeyPress);\r\n    };\r\n  }, [handleKeyPress]);\r\n\r\n  useEffect(() => {\r\n    if (score > highestScore) {\r\n      setHighestScore(score);\r\n      localStorage.setItem(\"highestScore\", score);\r\n    }\r\n  }, [score, highestScore]);\r\n\r\n  useEffect(() => {\r\n    const detectBaseCollision = () => {\r\n      const birdRect = document.querySelector(\".bird\").getBoundingClientRect();\r\n      const baseRect = baseRef.current.getBoundingClientRect();\r\n      if (birdRect.bottom >= baseRect.top) {\r\n        setGameOver(true);\r\n        cancelAnimationFrame(animateRef.current);\r\n      }\r\n    };\r\n\r\n    const animate = () => {\r\n      setBirdVelocity((prevVelocity) => prevVelocity + gravity);\r\n      setBirdPosition((prevPosition) => prevPosition + birdVelocity);\r\n      setBasePosition((prevPosition) => (prevPosition + 1) % (window.innerWidth + 100));\r\n      setTubes((prevTubes) => {\r\n        let incrementScore = false;\r\n        const newTubes = prevTubes.map((tube) => {\r\n          const newX = tube.x - tubeSpeed;\r\n          if (newX < 100 && tube.x >= 100) {\r\n            incrementScore = true;\r\n          }\r\n          return { ...tube, x: newX };\r\n        }).filter((tube) => tube.x > -tubeWidth);\r\n\r\n        if (incrementScore) {\r\n          setScore((prevScore) => prevScore + 1);\r\n        }\r\n\r\n        if (newTubes.length === 0 || window.innerWidth - newTubes[newTubes.length - 1].x >= tubeGap) {\r\n          newTubes.push(generateRandomTubePosition());\r\n        }\r\n\r\n        return newTubes;\r\n      });\r\n\r\n      detectBaseCollision();\r\n\r\n      // Check collision with tubes\r\n      const birdRect = document.querySelector(\".bird\").getBoundingClientRect();\r\n      tubes.forEach((tube) => {\r\n        const upperTubeRect = document.querySelector(\".tube-upper\").getBoundingClientRect();\r\n        const lowerTubeRect = document.querySelector(\".tube-lower\").getBoundingClientRect();\r\n        if (birdRect.right > tube.x && birdRect.left < tube.x + tubeWidth &&\r\n          (birdRect.top < upperTubeRect.bottom || birdRect.bottom > lowerTubeRect.top)) {\r\n          setGameOver(true);\r\n          cancelAnimationFrame(animateRef.current);\r\n        }\r\n      });\r\n\r\n      // Check collision with base\r\n      const baseHeight = 50;\r\n      const birdBottomPosition = birdPosition + 50 - 1; // Assuming bird height as 50\r\n      if (birdBottomPosition >= window.innerHeight - baseHeight) {\r\n        setGameOver(true);\r\n        cancelAnimationFrame(animateRef.current);\r\n      }\r\n\r\n      animateRef.current = requestAnimationFrame(animate);\r\n    };\r\n\r\n    if (gameStarted && !gamePaused && !gameOver) {\r\n      animateRef.current = requestAnimationFrame(animate);\r\n    }\r\n\r\n    return () => {\r\n      cancelAnimationFrame(animateRef.current);\r\n    };\r\n  }, [gameStarted, gamePaused, birdVelocity, tubes, gameOver, birdPosition]);\r\n\r\n  useEffect(() => {\r\n    if (audioRef.current) {\r\n      audioRef.current.src = song;\r\n      audioRef.current.load();\r\n    }\r\n  }, []);\r\n\r\n  // Restart the game\r\n  const restartGame = () => {\r\n    setBasePosition(0);\r\n    setBirdPosition(window.innerHeight / 2);\r\n    setBirdVelocity(0);\r\n    setGameStarted(false);\r\n    setGamePaused(false);\r\n    setGameOver(false);\r\n    setScore(0);\r\n    setTubes([]);\r\n  };\r\n\r\n  // Render JSX\r\n  return (\r\n    <div className=\"App\">\r\n      {/* Overlay for pause and game over */}\r\n      <div className={`overlay ${gamePaused || gameOver ? \"overlay-dark\" : \"\"}`} style={{ display: gamePaused ? \"block\" : \"none\" }} />\r\n      {gamePaused || gameOver ? (\r\n        <div className=\"overlay\" style={{\r\n          backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n          position: \"absolute\",\r\n          top: 0,\r\n          left: 0,\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          zIndex: 9,\r\n        }} />\r\n      ) : null}\r\n      <div className=\"overlay\" style={{ display: gamePaused ? \"block\" : \"none\" }} />\r\n      {/* Background */}\r\n      <img src={backgroundImage} alt=\"Background\" className=\"background\" />\r\n      {/* Tubes */}\r\n      {tubes.map((tube, index) => (\r\n        <Tube key={index} tube={tube} />\r\n      ))}\r\n      {/* Score display */}\r\n      <div className=\"score-display\">\r\n        <h1>SCORE: {score}</h1>\r\n      </div>\r\n      {/* Base container */}\r\n      <div className=\"base-container\">\r\n        <img src={baseImage} alt=\"Base\" className=\"base\" style={{ left: `${basePosition}px`, bottom: \"0\", zIndex: 1 }} ref={baseRef} />\r\n        <img src={baseImage} alt=\"Base\" className=\"base\" style={{ left: `${basePosition - window.innerWidth - 100}px`, bottom: \"0\" }} />\r\n      </div>\r\n      {/* Pause message */}\r\n      {gamePaused && (\r\n        <div className=\"pause-message\">\r\n          <h1>PAUSED</h1>\r\n          <h2>PRESS ESC OR SPACE TO CONTINUE</h2>\r\n        </div>\r\n      )}\r\n      {/* Bird */}\r\n      {gameStarted && !gameOver && (\r\n        <img src={birdImage} alt=\"Bird\" className=\"bird\" style={{ left: \"100px\", bottom: `${birdPosition}px` }} />\r\n      )}\r\n      {/* Game over message */}\r\n      {gameOver && (\r\n        <div className=\"pause-message\">\r\n          <h1>GAME OVER</h1>\r\n          <h1>HIGHEST SCORE: {highestScore}</h1>\r\n          <h1>PRESS SPACE TO RESTART</h1>\r\n        </div>\r\n      )}\r\n      {/* Start message */}\r\n      {!gameStarted && !gameOver && (\r\n        <div className=\"start-message\">\r\n          <h1>FLAPPY RAMON</h1>\r\n          <div className=\"bird-container\">\r\n            <img src={birdImage} alt=\"Bird\" className=\"start-bird\" />\r\n          </div>\r\n          <h1>PRESS SPACE TO START</h1>\r\n        </div>\r\n      )}\r\n      {/* Audio */}\r\n      <audio ref={audioRef} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"
        }
    ]
}